{"ast":null,"code":"import { MathUtils } from './MathUtils.js';\n\nclass Quaternion {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  static slerp(qa, qb, qm, t) {\n    console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n    return qm.slerpQuaternions(qa, qb, t);\n  }\n\n  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n    let x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1 + 0],\n          y1 = src1[srcOffset1 + 1],\n          z1 = src1[srcOffset1 + 2],\n          w1 = src1[srcOffset1 + 3];\n\n    if (t === 0) {\n      dst[dstOffset + 0] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n      return;\n    }\n\n    if (t === 1) {\n      dst[dstOffset + 0] = x1;\n      dst[dstOffset + 1] = y1;\n      dst[dstOffset + 2] = z1;\n      dst[dstOffset + 3] = w1;\n      return;\n    }\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      let s = 1 - t;\n      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n            dir = cos >= 0 ? 1 : -1,\n            sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n      if (sqrSin > Number.EPSILON) {\n        const sin = Math.sqrt(sqrSin),\n              len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      const tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n      if (s === 1 - t) {\n        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n\n  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n    const x0 = src0[srcOffset0];\n    const y0 = src0[srcOffset0 + 1];\n    const z0 = src0[srcOffset0 + 2];\n    const w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1];\n    const y1 = src1[srcOffset1 + 1];\n    const z1 = src1[srcOffset1 + 2];\n    const w1 = src1[srcOffset1 + 3];\n    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n    return dst;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set x(value) {\n    this._x = value;\n\n    this._onChangeCallback();\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set y(value) {\n    this._y = value;\n\n    this._onChangeCallback();\n  }\n\n  get z() {\n    return this._z;\n  }\n\n  set z(value) {\n    this._z = value;\n\n    this._onChangeCallback();\n  }\n\n  get w() {\n    return this._w;\n  }\n\n  set w(value) {\n    this._w = value;\n\n    this._onChangeCallback();\n  }\n\n  set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  }\n\n  copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromEuler(euler, update) {\n    if (!(euler && euler.isEuler)) {\n      throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n    }\n\n    const x = euler._x,\n          y = euler._y,\n          z = euler._z,\n          order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    const cos = Math.cos;\n    const sin = Math.sin;\n    const c1 = cos(x / 2);\n    const c2 = cos(y / 2);\n    const c3 = cos(z / 2);\n    const s1 = sin(x / 2);\n    const s2 = sin(y / 2);\n    const s3 = sin(z / 2);\n\n    switch (order) {\n      case 'XYZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'YXZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      case 'ZXY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'ZYX':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      case 'YZX':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n\n      case 'XZY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n\n      default:\n        console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n    }\n\n    if (update !== false) this._onChangeCallback();\n    return this;\n  }\n\n  setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n    // assumes axis is normalized\n    const halfAngle = angle / 2,\n          s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const te = m.elements,\n          m11 = te[0],\n          m12 = te[4],\n          m13 = te[8],\n          m21 = te[1],\n          m22 = te[5],\n          m23 = te[9],\n          m31 = te[2],\n          m32 = te[6],\n          m33 = te[10],\n          trace = m11 + m22 + m33;\n\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n    let r = vFrom.dot(vTo) + 1;\n\n    if (r < Number.EPSILON) {\n      // vFrom and vTo point in opposite directions\n      r = 0;\n\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n\n    return this.normalize();\n  }\n\n  angleTo(q) {\n    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n  }\n\n  rotateTowards(q, step) {\n    const angle = this.angleTo(q);\n    if (angle === 0) return this;\n    const t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  }\n\n  identity() {\n    return this.set(0, 0, 0, 1);\n  }\n\n  invert() {\n    // quaternion is assumed to have unit length\n    return this.conjugate();\n  }\n\n  conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  }\n\n  lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  }\n\n  length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  }\n\n  normalize() {\n    let l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  multiply(q, p) {\n    if (p !== undefined) {\n      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  }\n\n  premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  }\n\n  multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n    const qax = a._x,\n          qay = a._y,\n          qaz = a._z,\n          qaw = a._w;\n    const qbx = b._x,\n          qby = b._y,\n          qbz = b._z,\n          qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    const x = this._x,\n          y = this._y,\n          z = this._z,\n          w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize();\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n          ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  slerpQuaternions(qa, qb, t) {\n    this.copy(qa).slerp(qb, t);\n  }\n\n  equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  }\n\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n\n    this._onChangeCallback();\n\n    return this;\n  }\n\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  }\n\n  fromBufferAttribute(attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n    return this;\n  }\n\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n\n  _onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\nexport { Quaternion };","map":{"version":3,"names":["MathUtils","Quaternion","constructor","x","y","z","w","_x","_y","_z","_w","slerp","qa","qb","qm","t","console","warn","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","Math","sqrt","len","atan2","tDir","f","multiplyQuaternionsFlat","value","_onChangeCallback","set","clone","copy","quaternion","setFromEuler","euler","update","isEuler","Error","order","_order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","dot","abs","normalize","angleTo","q","acos","clamp","rotateTowards","step","min","identity","invert","conjugate","v","lengthSq","length","l","multiply","p","undefined","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","_onChange","callback","prototype","isQuaternion"],"sources":["/Users/sam/Documents/CakeProject/node_modules/three/src/math/Quaternion.js"],"sourcesContent":["import { MathUtils } from './MathUtils.js';\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n\t\treturn qm.slerpQuaternions( qa, qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\tthis.copy( qa ).slerp( qb, t );\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\n\nexport { Quaternion };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}