{"ast":null,"code":"import { Box3 } from './Box3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _box = /*@__PURE__*/new Box3();\n\nconst _v1 = /*@__PURE__*/new Vector3();\n\nconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\nconst _toPoint = /*@__PURE__*/new Vector3();\n\nclass Sphere {\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    this.center = center;\n    this.radius = radius;\n  }\n\n  set(center, radius) {\n    this.center.copy(center);\n    this.radius = radius;\n    return this;\n  }\n\n  setFromPoints(points, optionalCenter) {\n    const center = this.center;\n\n    if (optionalCenter !== undefined) {\n      center.copy(optionalCenter);\n    } else {\n      _box.setFromPoints(points).getCenter(center);\n    }\n\n    let maxRadiusSq = 0;\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n    }\n\n    this.radius = Math.sqrt(maxRadiusSq);\n    return this;\n  }\n\n  copy(sphere) {\n    this.center.copy(sphere.center);\n    this.radius = sphere.radius;\n    return this;\n  }\n\n  isEmpty() {\n    return this.radius < 0;\n  }\n\n  makeEmpty() {\n    this.center.set(0, 0, 0);\n    this.radius = -1;\n    return this;\n  }\n\n  containsPoint(point) {\n    return point.distanceToSquared(this.center) <= this.radius * this.radius;\n  }\n\n  distanceToPoint(point) {\n    return point.distanceTo(this.center) - this.radius;\n  }\n\n  intersectsSphere(sphere) {\n    const radiusSum = this.radius + sphere.radius;\n    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n  }\n\n  intersectsBox(box) {\n    return box.intersectsSphere(this);\n  }\n\n  intersectsPlane(plane) {\n    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n  }\n\n  clampPoint(point, target) {\n    const deltaLengthSq = this.center.distanceToSquared(point);\n\n    if (target === undefined) {\n      console.warn('THREE.Sphere: .clampPoint() target is now required');\n      target = new Vector3();\n    }\n\n    target.copy(point);\n\n    if (deltaLengthSq > this.radius * this.radius) {\n      target.sub(this.center).normalize();\n      target.multiplyScalar(this.radius).add(this.center);\n    }\n\n    return target;\n  }\n\n  getBoundingBox(target) {\n    if (target === undefined) {\n      console.warn('THREE.Sphere: .getBoundingBox() target is now required');\n      target = new Box3();\n    }\n\n    if (this.isEmpty()) {\n      // Empty sphere produces empty bounding box\n      target.makeEmpty();\n      return target;\n    }\n\n    target.set(this.center, this.center);\n    target.expandByScalar(this.radius);\n    return target;\n  }\n\n  applyMatrix4(matrix) {\n    this.center.applyMatrix4(matrix);\n    this.radius = this.radius * matrix.getMaxScaleOnAxis();\n    return this;\n  }\n\n  translate(offset) {\n    this.center.add(offset);\n    return this;\n  }\n\n  expandByPoint(point) {\n    // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n    _toPoint.subVectors(point, this.center);\n\n    const lengthSq = _toPoint.lengthSq();\n\n    if (lengthSq > this.radius * this.radius) {\n      const length = Math.sqrt(lengthSq);\n      const missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n      // and the other half to position. This gives a tighter enclosure, instead of if\n      // the whole missing distance were just added to radius.\n\n      this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n      this.radius += missingRadiusHalf;\n    }\n\n    return this;\n  }\n\n  union(sphere) {\n    // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n    // To enclose another sphere into this sphere, we only need to enclose two points:\n    // 1) Enclose the farthest point on the other sphere into this sphere.\n    // 2) Enclose the opposite point of the farthest point into this sphere.\n    _toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n    this.expandByPoint(_v1.copy(sphere.center).add(_toFarthestPoint));\n    this.expandByPoint(_v1.copy(sphere.center).sub(_toFarthestPoint));\n    return this;\n  }\n\n  equals(sphere) {\n    return sphere.center.equals(this.center) && sphere.radius === this.radius;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n}\n\nexport { Sphere };","map":{"version":3,"names":["Box3","Vector3","_box","_v1","_toFarthestPoint","_toPoint","Sphere","constructor","center","radius","set","copy","setFromPoints","points","optionalCenter","undefined","getCenter","maxRadiusSq","i","il","length","Math","max","distanceToSquared","sqrt","sphere","isEmpty","makeEmpty","containsPoint","point","distanceToPoint","distanceTo","intersectsSphere","radiusSum","intersectsBox","box","intersectsPlane","plane","abs","clampPoint","target","deltaLengthSq","console","warn","sub","normalize","multiplyScalar","add","getBoundingBox","expandByScalar","applyMatrix4","matrix","getMaxScaleOnAxis","translate","offset","expandByPoint","subVectors","lengthSq","missingRadiusHalf","union","equals","clone"],"sources":["/Users/sam/Documents/CakeProject/node_modules/three/src/math/Sphere.js"],"sourcesContent":["import { Box3 } from './Box3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _box = /*@__PURE__*/ new Box3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\ttarget = new Box3();\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Sphere };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}