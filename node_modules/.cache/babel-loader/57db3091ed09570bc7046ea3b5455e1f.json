{"ast":null,"code":"function arrayMin(array) {\n  if (array.length === 0) return Infinity;\n  let min = array[0];\n\n  for (let i = 1, l = array.length; i < l; ++i) {\n    if (array[i] < min) min = array[i];\n  }\n\n  return min;\n}\n\nfunction arrayMax(array) {\n  if (array.length === 0) return -Infinity;\n  let max = array[0];\n\n  for (let i = 1, l = array.length; i < l; ++i) {\n    if (array[i] > max) max = array[i];\n  }\n\n  return max;\n}\n\nconst TYPED_ARRAYS = {\n  Int8Array: Int8Array,\n  Uint8Array: Uint8Array,\n  Uint8ClampedArray: Uint8ClampedArray,\n  Int16Array: Int16Array,\n  Uint16Array: Uint16Array,\n  Int32Array: Int32Array,\n  Uint32Array: Uint32Array,\n  Float32Array: Float32Array,\n  Float64Array: Float64Array\n};\n\nfunction getTypedArray(type, buffer) {\n  return new TYPED_ARRAYS[type](buffer);\n}\n\nexport { arrayMin, arrayMax, getTypedArray };","map":{"version":3,"names":["arrayMin","array","length","Infinity","min","i","l","arrayMax","max","TYPED_ARRAYS","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","getTypedArray","type","buffer"],"sources":["/Users/sam/Documents/CakeProject/node_modules/three/src/utils.js"],"sourcesContent":["function arrayMin( array ) {\n\n\tif ( array.length === 0 ) return Infinity;\n\n\tlet min = array[ 0 ];\n\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] < min ) min = array[ i ];\n\n\t}\n\n\treturn min;\n\n}\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tlet max = array[ 0 ];\n\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nexport { arrayMin, arrayMax, getTypedArray };\n"],"mappings":"AAAA,SAASA,QAAT,CAAmBC,KAAnB,EAA2B;EAE1B,IAAKA,KAAK,CAACC,MAAN,KAAiB,CAAtB,EAA0B,OAAOC,QAAP;EAE1B,IAAIC,GAAG,GAAGH,KAAK,CAAE,CAAF,CAAf;;EAEA,KAAM,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,KAAK,CAACC,MAA3B,EAAmCG,CAAC,GAAGC,CAAvC,EAA0C,EAAGD,CAA7C,EAAiD;IAEhD,IAAKJ,KAAK,CAAEI,CAAF,CAAL,GAAaD,GAAlB,EAAwBA,GAAG,GAAGH,KAAK,CAAEI,CAAF,CAAX;EAExB;;EAED,OAAOD,GAAP;AAEA;;AAED,SAASG,QAAT,CAAmBN,KAAnB,EAA2B;EAE1B,IAAKA,KAAK,CAACC,MAAN,KAAiB,CAAtB,EAA0B,OAAO,CAAEC,QAAT;EAE1B,IAAIK,GAAG,GAAGP,KAAK,CAAE,CAAF,CAAf;;EAEA,KAAM,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,KAAK,CAACC,MAA3B,EAAmCG,CAAC,GAAGC,CAAvC,EAA0C,EAAGD,CAA7C,EAAiD;IAEhD,IAAKJ,KAAK,CAAEI,CAAF,CAAL,GAAaG,GAAlB,EAAwBA,GAAG,GAAGP,KAAK,CAAEI,CAAF,CAAX;EAExB;;EAED,OAAOG,GAAP;AAEA;;AAED,MAAMC,YAAY,GAAG;EACpBC,SAAS,EAAEA,SADS;EAEpBC,UAAU,EAAEA,UAFQ;EAGpBC,iBAAiB,EAAEA,iBAHC;EAIpBC,UAAU,EAAEA,UAJQ;EAKpBC,WAAW,EAAEA,WALO;EAMpBC,UAAU,EAAEA,UANQ;EAOpBC,WAAW,EAAEA,WAPO;EAQpBC,YAAY,EAAEA,YARM;EASpBC,YAAY,EAAEA;AATM,CAArB;;AAYA,SAASC,aAAT,CAAwBC,IAAxB,EAA8BC,MAA9B,EAAuC;EAEtC,OAAO,IAAIZ,YAAY,CAAEW,IAAF,CAAhB,CAA0BC,MAA1B,CAAP;AAEA;;AAED,SAASrB,QAAT,EAAmBO,QAAnB,EAA6BY,aAA7B"},"metadata":{},"sourceType":"module"}