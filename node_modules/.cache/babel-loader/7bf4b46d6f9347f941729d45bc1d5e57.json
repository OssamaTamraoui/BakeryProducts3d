{"ast":null,"code":"import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(+Infinity, +Infinity, +Infinity);\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(-Infinity, -Infinity, -Infinity);\n    this.min = min;\n    this.max = max;\n  }\n\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  setFromArray(array) {\n    let minX = +Infinity;\n    let minY = +Infinity;\n    let minZ = +Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let maxZ = -Infinity;\n\n    for (let i = 0, l = array.length; i < l; i += 3) {\n      const x = array[i];\n      const y = array[i + 1];\n      const z = array[i + 2];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  }\n\n  setFromBufferAttribute(attribute) {\n    let minX = +Infinity;\n    let minY = +Infinity;\n    let minZ = +Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let maxZ = -Infinity;\n\n    for (let i = 0, l = attribute.count; i < l; i++) {\n      const x = attribute.getX(i);\n      const y = attribute.getY(i);\n      const z = attribute.getZ(i);\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  }\n\n  setFromPoints(points) {\n    this.makeEmpty();\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  }\n\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector.copy(size).multiplyScalar(0.5);\n\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  setFromObject(object) {\n    this.makeEmpty();\n    return this.expandByObject(object);\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  }\n\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  }\n\n  getCenter(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getCenter() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  getSize(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getSize() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  expandByObject(object) {\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n    object.updateWorldMatrix(false, false);\n    const geometry = object.geometry;\n\n    if (geometry !== undefined) {\n      if (geometry.boundingBox === null) {\n        geometry.computeBoundingBox();\n      }\n\n      _box.copy(geometry.boundingBox);\n\n      _box.applyMatrix4(object.matrixWorld);\n\n      this.union(_box);\n    }\n\n    const children = object.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      this.expandByObject(children[i]);\n    }\n\n    return this;\n  }\n\n  containsPoint(point) {\n    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n  }\n\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  }\n\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getParameter() target is now required');\n      target = new Vector3();\n    }\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  }\n\n  intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n  }\n\n  intersectsSphere(sphere) {\n    // Find the point on the AABB closest to the sphere center.\n    this.clampPoint(sphere.center, _vector); // If that point is inside the sphere, the AABB and sphere intersect.\n\n    return _vector.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n    let min, max;\n\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n\n    return min <= -plane.constant && max >= -plane.constant;\n  }\n\n  intersectsTriangle(triangle) {\n    if (this.isEmpty()) {\n      return false;\n    } // compute box center and extents\n\n\n    this.getCenter(_center);\n\n    _extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n    _v0.subVectors(triangle.a, _center);\n\n    _v1.subVectors(triangle.b, _center);\n\n    _v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n    _f0.subVectors(_v1, _v0);\n\n    _f1.subVectors(_v2, _v1);\n\n    _f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n    let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    } // test 3 face normals from the aabb\n\n\n    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    } // finally testing the face normal of the triangle\n    // use already existing triangle edge vectors here\n\n\n    _triangleNormal.crossVectors(_f0, _f1);\n\n    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n    return satForAxes(axes, _v0, _v1, _v2, _extents);\n  }\n\n  clampPoint(point, target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .clampPoint() target is now required');\n      target = new Vector3();\n    }\n\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  distanceToPoint(point) {\n    const clampedPoint = _vector.copy(point).clamp(this.min, this.max);\n\n    return clampedPoint.sub(point).length();\n  }\n\n  getBoundingSphere(target) {\n    if (target === undefined) {\n      console.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n    }\n\n    this.getCenter(target.center);\n    target.radius = this.getSize(_vector).length() * 0.5;\n    return target;\n  }\n\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  applyMatrix4(matrix) {\n    // transform of empty box is an empty box.\n    if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n    this.setFromPoints(_points);\n    return this;\n  }\n\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n\n}\n\nBox3.prototype.isBox3 = true;\nconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\nconst _vector = /*@__PURE__*/new Vector3();\n\nconst _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\nconst _v0 = /*@__PURE__*/new Vector3();\n\nconst _v1 = /*@__PURE__*/new Vector3();\n\nconst _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\nconst _f0 = /*@__PURE__*/new Vector3();\n\nconst _f1 = /*@__PURE__*/new Vector3();\n\nconst _f2 = /*@__PURE__*/new Vector3();\n\nconst _center = /*@__PURE__*/new Vector3();\n\nconst _extents = /*@__PURE__*/new Vector3();\n\nconst _triangleNormal = /*@__PURE__*/new Vector3();\n\nconst _testAxis = /*@__PURE__*/new Vector3();\n\nfunction satForAxes(axes, v0, v1, v2, extents) {\n  for (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n    _testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n    const p0 = v0.dot(_testAxis);\n    const p1 = v1.dot(_testAxis);\n    const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n      // points of the projected triangle are outside the projected half-length of the aabb\n      // the axis is seperating and we can exit\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { Box3 };","map":{"version":3,"names":["Vector3","Box3","constructor","min","Infinity","max","set","copy","setFromArray","array","minX","minY","minZ","maxX","maxY","maxZ","i","l","length","x","y","z","setFromBufferAttribute","attribute","count","getX","getY","getZ","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","center","size","halfSize","_vector","multiplyScalar","sub","add","setFromObject","object","expandByObject","clone","box","isEmpty","getCenter","target","undefined","console","warn","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box","applyMatrix4","matrixWorld","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","distanceToSquared","radius","intersectsPlane","plane","normal","constant","intersectsTriangle","triangle","_center","_extents","_v0","a","_v1","b","_v2","c","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","crossVectors","clamp","distanceToPoint","clampedPoint","getBoundingSphere","error","intersect","matrix","_points","translate","offset","equals","prototype","isBox3","_testAxis","v0","v1","v2","extents","j","fromArray","r","Math","abs","p0","dot","p1","p2"],"sources":["/Users/sam/Documents/CakeProject/node_modules/three/src/math/Box3.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box );\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t}\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nconst _box = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nexport { Box3 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}