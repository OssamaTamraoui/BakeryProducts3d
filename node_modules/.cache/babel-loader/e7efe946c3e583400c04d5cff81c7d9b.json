{"ast":null,"code":"import { Vector3 } from './Vector3.js';\n\nconst _vector = /*@__PURE__*/new Vector3();\n\nconst _segCenter = /*@__PURE__*/new Vector3();\n\nconst _segDir = /*@__PURE__*/new Vector3();\n\nconst _diff = /*@__PURE__*/new Vector3();\n\nconst _edge1 = /*@__PURE__*/new Vector3();\n\nconst _edge2 = /*@__PURE__*/new Vector3();\n\nconst _normal = /*@__PURE__*/new Vector3();\n\nclass Ray {\n  constructor() {\n    let origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, -1);\n    this.origin = origin;\n    this.direction = direction;\n  }\n\n  set(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction);\n    return this;\n  }\n\n  copy(ray) {\n    this.origin.copy(ray.origin);\n    this.direction.copy(ray.direction);\n    return this;\n  }\n\n  at(t, target) {\n    if (target === undefined) {\n      console.warn('THREE.Ray: .at() target is now required');\n      target = new Vector3();\n    }\n\n    return target.copy(this.direction).multiplyScalar(t).add(this.origin);\n  }\n\n  lookAt(v) {\n    this.direction.copy(v).sub(this.origin).normalize();\n    return this;\n  }\n\n  recast(t) {\n    this.origin.copy(this.at(t, _vector));\n    return this;\n  }\n\n  closestPointToPoint(point, target) {\n    if (target === undefined) {\n      console.warn('THREE.Ray: .closestPointToPoint() target is now required');\n      target = new Vector3();\n    }\n\n    target.subVectors(point, this.origin);\n    const directionDistance = target.dot(this.direction);\n\n    if (directionDistance < 0) {\n      return target.copy(this.origin);\n    }\n\n    return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n  }\n\n  distanceToPoint(point) {\n    return Math.sqrt(this.distanceSqToPoint(point));\n  }\n\n  distanceSqToPoint(point) {\n    const directionDistance = _vector.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n    if (directionDistance < 0) {\n      return this.origin.distanceToSquared(point);\n    }\n\n    _vector.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n    return _vector.distanceToSquared(point);\n  }\n\n  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n    // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    // It returns the min distance between the ray and the segment\n    // defined by v0 and v1\n    // It can also set two optional targets :\n    // - The closest point on the ray\n    // - The closest point on the segment\n    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n    _segDir.copy(v1).sub(v0).normalize();\n\n    _diff.copy(this.origin).sub(_segCenter);\n\n    const segExtent = v0.distanceTo(v1) * 0.5;\n    const a01 = -this.direction.dot(_segDir);\n\n    const b0 = _diff.dot(this.direction);\n\n    const b1 = -_diff.dot(_segDir);\n\n    const c = _diff.lengthSq();\n\n    const det = Math.abs(1 - a01 * a01);\n    let s0, s1, sqrDist, extDet;\n\n    if (det > 0) {\n      // The ray and segment are not parallel.\n      s0 = a01 * b1 - b0;\n      s1 = a01 * b0 - b1;\n      extDet = segExtent * det;\n\n      if (s0 >= 0) {\n        if (s1 >= -extDet) {\n          if (s1 <= extDet) {\n            // region 0\n            // Minimum at interior points of ray and segment.\n            const invDet = 1 / det;\n            s0 *= invDet;\n            s1 *= invDet;\n            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n          } else {\n            // region 1\n            s1 = segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        } else {\n          // region 5\n          s1 = -segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      } else {\n        if (s1 <= -extDet) {\n          // region 4\n          s0 = Math.max(0, -(-a01 * segExtent + b0));\n          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        } else if (s1 <= extDet) {\n          // region 3\n          s0 = 0;\n          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = s1 * (s1 + 2 * b1) + c;\n        } else {\n          // region 2\n          s0 = Math.max(0, -(a01 * segExtent + b0));\n          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      }\n    } else {\n      // Ray and segment are parallel.\n      s1 = a01 > 0 ? -segExtent : segExtent;\n      s0 = Math.max(0, -(a01 * s1 + b0));\n      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n    }\n\n    if (optionalPointOnRay) {\n      optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n    }\n\n    if (optionalPointOnSegment) {\n      optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n    }\n\n    return sqrDist;\n  }\n\n  intersectSphere(sphere, target) {\n    _vector.subVectors(sphere.center, this.origin);\n\n    const tca = _vector.dot(this.direction);\n\n    const d2 = _vector.dot(_vector) - tca * tca;\n    const radius2 = sphere.radius * sphere.radius;\n    if (d2 > radius2) return null;\n    const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n    const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n    const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n    if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    // in order to always return an intersect point that is in front of the ray.\n\n    if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n    return this.at(t0, target);\n  }\n\n  intersectsSphere(sphere) {\n    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  distanceToPlane(plane) {\n    const denominator = plane.normal.dot(this.direction);\n\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (plane.distanceToPoint(this.origin) === 0) {\n        return 0;\n      } // Null is preferable to undefined since undefined means.... it is undefined\n\n\n      return null;\n    }\n\n    const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n    return t >= 0 ? t : null;\n  }\n\n  intersectPlane(plane, target) {\n    const t = this.distanceToPlane(plane);\n\n    if (t === null) {\n      return null;\n    }\n\n    return this.at(t, target);\n  }\n\n  intersectsPlane(plane) {\n    // check if the ray lies on the plane first\n    const distToPoint = plane.distanceToPoint(this.origin);\n\n    if (distToPoint === 0) {\n      return true;\n    }\n\n    const denominator = plane.normal.dot(this.direction);\n\n    if (denominator * distToPoint < 0) {\n      return true;\n    } // ray origin is behind the plane (and is pointing behind it)\n\n\n    return false;\n  }\n\n  intersectBox(box, target) {\n    let tmin, tmax, tymin, tymax, tzmin, tzmax;\n    const invdirx = 1 / this.direction.x,\n          invdiry = 1 / this.direction.y,\n          invdirz = 1 / this.direction.z;\n    const origin = this.origin;\n\n    if (invdirx >= 0) {\n      tmin = (box.min.x - origin.x) * invdirx;\n      tmax = (box.max.x - origin.x) * invdirx;\n    } else {\n      tmin = (box.max.x - origin.x) * invdirx;\n      tmax = (box.min.x - origin.x) * invdirx;\n    }\n\n    if (invdiry >= 0) {\n      tymin = (box.min.y - origin.y) * invdiry;\n      tymax = (box.max.y - origin.y) * invdiry;\n    } else {\n      tymin = (box.max.y - origin.y) * invdiry;\n      tymax = (box.min.y - origin.y) * invdiry;\n    }\n\n    if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n    // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    if (tymin > tmin || tmin !== tmin) tmin = tymin;\n    if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n    if (invdirz >= 0) {\n      tzmin = (box.min.z - origin.z) * invdirz;\n      tzmax = (box.max.z - origin.z) * invdirz;\n    } else {\n      tzmin = (box.max.z - origin.z) * invdirz;\n      tzmax = (box.min.z - origin.z) * invdirz;\n    }\n\n    if (tmin > tzmax || tzmin > tmax) return null;\n    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n    if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n    if (tmax < 0) return null;\n    return this.at(tmin >= 0 ? tmin : tmax, target);\n  }\n\n  intersectsBox(box) {\n    return this.intersectBox(box, _vector) !== null;\n  }\n\n  intersectTriangle(a, b, c, backfaceCulling, target) {\n    // Compute the offset origin, edges, and normal.\n    // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n    _edge1.subVectors(b, a);\n\n    _edge2.subVectors(c, a);\n\n    _normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n    let DdN = this.direction.dot(_normal);\n    let sign;\n\n    if (DdN > 0) {\n      if (backfaceCulling) return null;\n      sign = 1;\n    } else if (DdN < 0) {\n      sign = -1;\n      DdN = -DdN;\n    } else {\n      return null;\n    }\n\n    _diff.subVectors(this.origin, a);\n\n    const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n    if (DdQxE2 < 0) {\n      return null;\n    }\n\n    const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n    if (DdE1xQ < 0) {\n      return null;\n    } // b1+b2 > 1, no intersection\n\n\n    if (DdQxE2 + DdE1xQ > DdN) {\n      return null;\n    } // Line intersects triangle, check if ray does.\n\n\n    const QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n    if (QdN < 0) {\n      return null;\n    } // Ray intersects triangle.\n\n\n    return this.at(QdN / DdN, target);\n  }\n\n  applyMatrix4(matrix4) {\n    this.origin.applyMatrix4(matrix4);\n    this.direction.transformDirection(matrix4);\n    return this;\n  }\n\n  equals(ray) {\n    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n}\n\nexport { Ray };","map":{"version":3,"names":["Vector3","_vector","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","constructor","origin","direction","set","copy","ray","at","t","target","undefined","console","warn","multiplyScalar","add","lookAt","v","sub","normalize","recast","closestPointToPoint","point","subVectors","directionDistance","dot","distanceToPoint","Math","sqrt","distanceSqToPoint","distanceToSquared","distanceSqToSegment","v0","v1","optionalPointOnRay","optionalPointOnSegment","segExtent","distanceTo","a01","b0","b1","c","lengthSq","det","abs","s0","s1","sqrDist","extDet","invDet","max","min","intersectSphere","sphere","center","tca","d2","radius2","radius","thc","t0","t1","intersectsSphere","distanceToPlane","plane","denominator","normal","constant","intersectPlane","intersectsPlane","distToPoint","intersectBox","box","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","x","invdiry","y","invdirz","z","intersectsBox","intersectTriangle","a","b","backfaceCulling","crossVectors","DdN","sign","DdQxE2","DdE1xQ","cross","QdN","applyMatrix4","matrix4","transformDirection","equals","clone"],"sources":["/Users/sam/Documents/CakeProject/node_modules/three/src/math/Ray.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector.dot( this.direction );\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Ray };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}