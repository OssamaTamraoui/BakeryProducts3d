{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Documents/CakeProject/src/components/MaterialSelector/MaterialSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport { Grid, IconButton, Avatar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { setCurrentMaterialData, setSelectedMeshMaterial } from \"../../redux/actions/MaterialActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  }\n}));\nconst useAvatarStyles = makeStyles(theme => ({\n  root: {\n    width: 60,\n    height: 60,\n    border: \"3px solid\"\n  }\n}));\n\nconst MaterialSelector = props => {\n  _s();\n\n  var _nodeStore$currentNod;\n\n  const classes = useStyles();\n  const classesAvatar = useAvatarStyles();\n  const {\n    materialStore,\n    meshStore,\n    nodeStore,\n    productStore,\n    setCurrentMaterialData,\n    setSelectedMeshMaterial\n  } = props;\n  useEffect(() => {\n    setCurrentMaterialData(null);\n  }, [nodeStore.currentNodeData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.root,\n      children: nodeStore.currentNodeData ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Choose a material\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.root,\n      children: (_nodeStore$currentNod = nodeStore.currentNodeData) === null || _nodeStore$currentNod === void 0 ? void 0 : _nodeStore$currentNod.candidateMaterials.map(materialData => {\n        return /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          color: materialStore.selectedMeshMaterial === materialData.name ? \"primary\" : \"default\",\n          onClick: () => {\n            if (materialStore.selectedMeshMaterial !== materialData.name) {\n              setSelectedMeshMaterial(materialData.name);\n              setCurrentMaterialData(materialData.path);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            alt: materialData.name,\n            title: materialData.name,\n            src: materialData.thumbnail,\n            classes: classesAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, materialData.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MaterialSelector, \"E9ohwNUCIGboYjfOo9C/Mz1Cnzs=\", false, function () {\n  return [useStyles, useAvatarStyles];\n});\n\n_c = MaterialSelector;\n\nconst mapStateToProps = state => ({\n  materialStore: state.materialStore,\n  meshStore: state.meshStore,\n  nodeStore: state.nodeStore,\n  productStore: state.productStore,\n  setCurrentMaterialData: PropTypes.func.isRequired,\n  setSelectedMeshMaterial: PropTypes.func.isRequired\n});\n\nexport default connect(mapStateToProps, {\n  setCurrentMaterialData,\n  setSelectedMeshMaterial\n})(MaterialSelector);\n\nvar _c;\n\n$RefreshReg$(_c, \"MaterialSelector\");","map":{"version":3,"names":["React","useEffect","connect","PropTypes","Grid","IconButton","Avatar","Typography","makeStyles","setCurrentMaterialData","setSelectedMeshMaterial","useStyles","theme","root","display","margin","spacing","useAvatarStyles","width","height","border","MaterialSelector","props","classes","classesAvatar","materialStore","meshStore","nodeStore","productStore","currentNodeData","candidateMaterials","map","materialData","selectedMeshMaterial","name","path","thumbnail","mapStateToProps","state","func","isRequired"],"sources":["/Users/sam/Documents/CakeProject/src/components/MaterialSelector/MaterialSelector.js"],"sourcesContent":["import React, {useEffect} from \"react\"\nimport {connect} from \"react-redux\"\nimport {PropTypes} from \"prop-types\"\nimport {Grid, IconButton, Avatar, Typography} from \"@material-ui/core\"\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport {\n  setCurrentMaterialData,\n  setSelectedMeshMaterial\n} from \"../../redux/actions/MaterialActions\"\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  }\n}))\n\nconst useAvatarStyles = makeStyles(theme => ({\n  root: {\n    width: 60,\n    height: 60,\n    border: \"3px solid\"\n  }\n}))\n\nconst MaterialSelector = props => {\n  const classes = useStyles()\n  const classesAvatar = useAvatarStyles()\n\n  const {\n    materialStore,\n    meshStore,\n    nodeStore,\n    productStore,\n    setCurrentMaterialData,\n    setSelectedMeshMaterial\n  } = props\n\n  useEffect(() => {\n    setCurrentMaterialData(null)\n  }, [nodeStore.currentNodeData])\n\n  return (\n    <>\n      <Grid item className={classes.root}>\n        {nodeStore.currentNodeData ? (\n          <Typography variant=\"h4\">Choose a material</Typography>\n        ) : (\n          <></>\n        )}\n      </Grid>\n      <Grid item className={classes.root}>\n        {nodeStore.currentNodeData?.candidateMaterials.map(materialData => {\n          return (\n            <IconButton\n              key={materialData.name}\n              size=\"small\"\n              color={\n                materialStore.selectedMeshMaterial === materialData.name\n                  ? \"primary\"\n                  : \"default\"\n              }\n              onClick={() => {\n                if (materialStore.selectedMeshMaterial !== materialData.name) {\n                  setSelectedMeshMaterial(materialData.name)\n                  setCurrentMaterialData(materialData.path)\n                }\n              }}\n            >\n              <Avatar\n                alt={materialData.name}\n                title={materialData.name}\n                src={materialData.thumbnail}\n                classes={classesAvatar}\n              />\n            </IconButton>\n          )\n        })}\n      </Grid>\n    </>\n  )\n}\n\nconst mapStateToProps = state => ({\n  materialStore: state.materialStore,\n  meshStore: state.meshStore,\n  nodeStore: state.nodeStore,\n  productStore: state.productStore,\n  setCurrentMaterialData: PropTypes.func.isRequired,\n  setSelectedMeshMaterial: PropTypes.func.isRequired\n})\n\nexport default connect(mapStateToProps, {\n  setCurrentMaterialData,\n  setSelectedMeshMaterial\n})(MaterialSelector)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}