{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Documents/CakeProject/src/components/Viewer3D/Viewer3D.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport ToggleDisplay from \"react-toggle-display\";\nimport * as THREE from \"three\";\nimport * as POSTPROCESSING from \"postprocessing\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { PMREMGenerator } from \"three/src/extras/PMREMGenerator\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Loader from \"../Loader\";\nimport styles from \"./Viewer3D.module.css\";\nimport Composer from \"./libs/Composer\";\nimport Lights from \"./libs/Lights\";\nimport { FitCameraToSelection, ShadowPlane } from \"./libs/Helpers\";\nimport { SPACE_SIZE } from \"./Viewer3DConstants\";\nimport { setSelectedMeshData } from \"../../redux/actions/MeshActions\";\nimport { setSelectedMeshMaterial } from \"../../redux/actions/MaterialActions\";\nimport { setCurrentNodeData } from \"../../redux/actions/NodeActions\";\nimport { FormControl, InputLabel, Select } from \"@material-ui/core\";\nimport { Button } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet g_model_root;\nlet g_scene;\nlet g_camera;\nlet g_camera_controller;\nlet g_render;\nlet g_render_scene;\nlet g_selected_node;\nlet g_gltf_loader;\nlet g_texture_loader;\nlet g_rgbe_loader;\nlet g_is_load_model = false;\n\nfunction Viewer3D(props) {\n  _s();\n\n  const {\n    materialStore,\n    meshStore,\n    nodeStore,\n    productStore,\n    setSelectedMeshData,\n    setSelectedMeshMaterial,\n    setCurrentNodeData\n  } = props;\n  const canvasContainer = useRef(null);\n  const [showLoader, setShowLoader] = useState(true);\n\n  function setNodeMaterial(node, materialData) {\n    if (node && materialData) {\n      node.material.name = materialData.name; //Color\n\n      if (materialData.color === \"\") {\n        node.material.color.set(null);\n      } else {\n        node.material.color.set(materialData.color);\n      } //Albedo\n\n\n      if (materialData.map === \"\") {\n        node.material.map = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.map);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.map = texture;\n      } //Normal\n\n\n      if (materialData.normalMap === \"\") {\n        node.material.normalMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.normalMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.normalMap = texture;\n        node.material.normalScale = new THREE.Vector2(materialData.normalScale.x, materialData.normalScale.y);\n      } //Bump\n\n\n      if (materialData.bumpMap === \"\") {\n        node.material.bumpMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.bumpMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.bumpMap = texture;\n        node.material.bumpScale = materialData.bumpScale;\n      } //Displacement\n\n\n      if (materialData.displacementMap === \"\") {\n        node.material.displacementMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.displacementMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.displacementMap = texture;\n        node.material.displacementScale = materialData.displacementScale;\n        node.material.displacementBias = materialData.displacementBias;\n      } //Roughness\n\n\n      if (materialData.roughnessMap === \"\") {\n        node.material.roughnessMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.roughnessMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.roughnessMap = texture;\n      }\n\n      node.material.roughness = materialData.roughness; //Metalness\n\n      if (materialData.metalnessMap !== \"\") {\n        node.material.metalnessMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.metalnessMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.metalnessMap = texture;\n      }\n\n      node.material.metalness = materialData.metalness; //Alpha\n\n      if (materialData.alphaMap === \"\") {\n        node.material.alphaMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.alphaMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.alphaMap = texture;\n      }\n\n      node.material.opacity = materialData.opacity; //AO\n\n      if (materialData.aoMap === \"\") {\n        node.material.aoMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.aoMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.aoMap = texture;\n        node.material.aoMapIntensity = materialData.aoMapIntensity;\n      } //Emissive\n\n\n      if (materialData.emissiveMap === \"\") {\n        node.material.emissiveMap = null;\n      } else {\n        const texture = g_texture_loader.load(materialData.emissiveMap);\n\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v);\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        node.material.emissiveMap = texture;\n        node.material.emissiveIntensity = materialData.emissiveIntensity;\n      }\n\n      node.material.emissive.set(materialData.emissive); //Env\n\n      node.material.envMapIntensity = materialData.envMapIntensity;\n      node.material.wireframe = materialData.wireframe;\n      node.material.transparent = materialData.transparent;\n      node.material.needsUpdate = true; //Set material to candidate meshes\n\n      node.children.forEach(child => {\n        child.material = node.material;\n      });\n    }\n  }\n\n  async function fetchMaterialData(path) {\n    const response = await fetch(path);\n    const data = await response.json();\n    return data;\n  }\n\n  useEffect(() => {\n    let width = canvasContainer.current.offsetWidth;\n    let height = canvasContainer.current.offsetHeight;\n    let renderRequested = false;\n    let smaaSearchImage = null;\n    let smaaAreaImage = null;\n    const clock = new THREE.Clock();\n    let composer = null;\n    g_model_root = new THREE.Object3D();\n    g_model_root.name = \"ModelRoot\";\n    const rayCaster = new THREE.Raycaster();\n    const intersects = [];\n    /**\n     * Scene\n     */\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(\"#aeaeae\"); // scene.fog = new THREE.Fog(0xa0a0a0, SPACE_SIZE * 0.9, SPACE_SIZE)\n\n    g_scene = scene;\n    scene.add(g_model_root);\n    /**\n     * Lighter\n     */\n\n    const lighter = Lights();\n    scene.add(lighter);\n    /**\n     * Helper\n     */\n    // const axisHelper = new THREE.AxesHelper(5)\n    // scene.add(axisHelper)\n\n    const shadowPlane = ShadowPlane();\n    scene.add(shadowPlane);\n    /**\n     * Camera\n     */\n\n    const camera = new THREE.PerspectiveCamera(30, width / height, 0.01, SPACE_SIZE * 100);\n    camera.position.set(-SPACE_SIZE * 0.2, SPACE_SIZE, SPACE_SIZE);\n    camera.lookAt(0, 0, 0);\n    g_camera = camera;\n    /**\n     * Resize & Render\n     */\n\n    function resizeRendererToDisplaySize() {\n      const canvasWidth = renderer.domElement.offsetWidth;\n      const canvasHeight = renderer.domElement.offsetHeight;\n      const needResize = canvasWidth !== width || canvasHeight !== height;\n\n      if (needResize) {\n        width = canvasWidth;\n        height = canvasHeight;\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        composer.setSize(width, height);\n        requestRenderIfNotRequested();\n      }\n    }\n\n    function render() {\n      renderRequested = false;\n      resizeRendererToDisplaySize();\n      cameraController.update();\n      renderer.render(scene, camera);\n      if (composer) composer.render(clock.getDelta());\n    }\n\n    function requestRenderIfNotRequested() {\n      if (!renderRequested) {\n        renderRequested = true;\n        requestAnimationFrame(render);\n      }\n    }\n\n    g_render_scene = requestRenderIfNotRequested;\n    /**\n     * Renderer\n     */\n\n    const renderer = new THREE.WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: false,\n      stencil: false,\n      depth: false\n    });\n    renderer.setSize(width, height, false);\n    renderer.setPixelRatio(window.devicePixelRatio || 1);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    g_render = renderer;\n    canvasContainer.current.appendChild(renderer.domElement); //Mouse&Touch event\n\n    function onMouseDown(event) {}\n\n    function onMouseUp(event) {\n      const pickedPoint = new THREE.Vector2(event.offsetX / width * 2 - 1, -(event.offsetY / height) * 2 + 1);\n      rayCaster.setFromCamera(pickedPoint, camera);\n      let pickedObjs = rayCaster.intersectObjects(intersects);\n\n      if (pickedObjs.length > 0) {}\n    }\n\n    function onMouseMove(event) {\n      const pickedPoint = new THREE.Vector2(event.offsetX / width * 2 - 1, -(event.offsetY / height) * 2 + 1);\n      rayCaster.setFromCamera(pickedPoint, camera);\n      let pickedObjs = rayCaster.intersectObjects(intersects);\n\n      if (pickedObjs.length > 0) {\n        document.body.style.cursor = \"pointer\";\n      } else {\n        document.body.style.cursor = \"default\";\n      }\n    }\n\n    function onTouchStart(event) {}\n\n    function onTouchEnd(event) {\n      const pickedPoint = new THREE.Vector2(event.changedTouches[0].pageX / width * 2 - 1, -(event.changedTouches[0].pageY / height) * 2 + 1);\n      rayCaster.setFromCamera(pickedPoint, camera);\n      let pickedObjs = rayCaster.intersectObjects(intersects);\n\n      if (pickedObjs.length > 0) {}\n    }\n\n    function onTouchMove() {}\n\n    renderer.domElement.addEventListener(\"mousedown\", onMouseDown);\n    renderer.domElement.addEventListener(\"mouseup\", onMouseUp);\n    renderer.domElement.addEventListener(\"mousemove\", onMouseMove);\n    renderer.domElement.addEventListener(\"touchstart\", onTouchStart);\n    renderer.domElement.addEventListener(\"touchend\", onTouchEnd);\n    renderer.domElement.addEventListener(\"touchmove\", onTouchMove);\n    /**\n     * Camera Controller\n     */\n\n    const cameraController = new OrbitControls(camera, renderer.domElement);\n    cameraController.minAzimuthAngle = -180;\n    cameraController.maxAzimuthAngle = 180;\n    cameraController.dampingFactor = 0.05;\n    cameraController.screenSpacePanning = true; // cameraController.minDistance = 1\n    // cameraController.maxDistance = 500\n    // cameraController.minZoom = 1\n    // cameraController.maxZoom = 500\n\n    cameraController.minPolarAngle = 1;\n    cameraController.maxPolarAngle = Math.PI / 1.5;\n    cameraController.enableDamping = true;\n    cameraController.enableZoom = true;\n    cameraController.enablePan = false;\n    g_camera_controller = cameraController;\n    /**\n     * Load Assets\n     */\n\n    const gltfLoadingManager = new THREE.LoadingManager();\n\n    gltfLoadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setShowLoader(true);\n    };\n\n    gltfLoadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      if (!showLoader) {\n        setShowLoader(true);\n      }\n    };\n\n    gltfLoadingManager.onLoad = () => {\n      if (g_is_load_model) {\n        camera.position.set(-SPACE_SIZE * 0.2, SPACE_SIZE, SPACE_SIZE);\n        camera.lookAt(0, 0, 0);\n        FitCameraToSelection(camera, g_model_root, 6, cameraController);\n        g_is_load_model = false;\n      }\n\n      requestRenderIfNotRequested();\n      setTimeout(() => {\n        setShowLoader(false);\n      }, 1200);\n    };\n\n    const gLTFLoader = new GLTFLoader(gltfLoadingManager);\n    g_gltf_loader = gLTFLoader;\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath(\"/draco/\");\n    gLTFLoader.setDRACOLoader(dracoLoader);\n    const textureLoader = new THREE.TextureLoader(gltfLoadingManager);\n    g_texture_loader = textureLoader; //Load smaa images\n\n    const smaaImageLoader = new POSTPROCESSING.SMAAImageLoader(gltfLoadingManager);\n    smaaImageLoader.load(_ref => {\n      let [search, area] = _ref;\n      smaaSearchImage = search;\n      smaaAreaImage = area;\n      composer = Composer(renderer, scene, camera, smaaSearchImage, smaaAreaImage);\n    }); //Load env map\n\n    g_rgbe_loader = new RGBELoader(gltfLoadingManager);\n    /**\n     * RenderEvent & Dispose\n     */\n\n    renderer.render(scene, camera);\n    cameraController.addEventListener(\"change\", requestRenderIfNotRequested);\n    window.addEventListener(\"resize\", requestRenderIfNotRequested);\n    return () => {\n      cameraController.removeEventListener(\"change\", requestRenderIfNotRequested);\n      window.removeEventListener(\"resize\", requestRenderIfNotRequested);\n      if (canvasContainer.current) canvasContainer.current.innerHTML = \"\";\n    };\n  }, []);\n  useEffect(() => {\n    setCurrentNodeData(null); //Set env\n\n    if (productStore.productData) {\n      g_rgbe_loader.setDataType(THREE.UnsignedByteType).load(productStore.productData.envMap, texture => {\n        const pg = new PMREMGenerator(g_render);\n        pg.compileEquirectangularShader();\n        const envMap = pg.fromEquirectangular(texture).texture;\n        g_scene.environment = envMap; // g_scene.background = envMap\n\n        texture.dispose();\n        pg.dispose();\n      });\n    } //Clear\n\n\n    g_model_root.children.forEach(node => {\n      node.children.forEach(child => {\n        child.geometry.dispose();\n        child.material.dispose();\n        node.remove(child);\n      });\n      g_model_root.remove(node);\n    });\n    g_model_root.children = []; //Load models\n\n    if (productStore.productData) {\n      g_is_load_model = true;\n      g_gltf_loader.load(productStore.productData[productStore.currentDracoVersion], gltf => {\n        if (gltf.scene) {\n          //Get gltf mesh\n          const gltfMeshes = [];\n          gltf.scene.traverse(child => {\n            if (child.type === \"Mesh\") {\n              child.castShadow = true;\n              gltfMeshes.push(child);\n            }\n          }); //Generate the model structure\n\n          productStore.productData.nodes.forEach(node => {\n            const pivot = new THREE.Object3D();\n            pivot.name = node.id;\n            node.candidateMeshes.forEach(json => {\n              const gltfMesh = gltfMeshes.find(mesh => mesh.name === json.id);\n\n              if (gltfMesh) {\n                gltfMesh.visible = gltfMesh.name === node.defaultMesh;\n                pivot.add(gltfMesh);\n              }\n            });\n            g_model_root.add(pivot);\n          }); //Set data for selected mesh\n\n          const meshData = [];\n          productStore.productData.nodes.forEach(node => {\n            meshData.push({\n              nodeId: node.id,\n              meshId: node.defaultMesh\n            });\n          });\n          setSelectedMeshData(meshData); //Set default material\n\n          g_model_root.children.forEach(child => {\n            var _productStore$product;\n\n            const material = new THREE.MeshStandardMaterial({\n              color: \"#363636\"\n            });\n            material.envMap = g_scene.environment;\n            child.material = material;\n            const materialData = (_productStore$product = productStore.productData.nodes.find(node => node.id === child.name)) === null || _productStore$product === void 0 ? void 0 : _productStore$product.defaultMaterial;\n            fetchMaterialData(materialData === null || materialData === void 0 ? void 0 : materialData.path).then(data => {\n              setNodeMaterial(child, data);\n            });\n          });\n        }\n      });\n    }\n\n    g_render_scene();\n  }, [productStore.productData, productStore.currentDracoVersion]);\n  useEffect(() => {\n    var _g_model_root;\n\n    if (g_selected_node) {\n      // g_selected_node.material.color.set(g_selected_node.originColor)\n      g_selected_node = null;\n      setSelectedMeshMaterial(null);\n    }\n\n    (_g_model_root = g_model_root) === null || _g_model_root === void 0 ? void 0 : _g_model_root.traverse(child => {\n      var _nodeStore$currentNod;\n\n      if (child.type === \"Object3D\" && child.name === ((_nodeStore$currentNod = nodeStore.currentNodeData) === null || _nodeStore$currentNod === void 0 ? void 0 : _nodeStore$currentNod.id)) {\n        g_selected_node = child;\n        setSelectedMeshMaterial(child.material.name); // g_selected_node.originColor = new THREE.Color(\n        //   g_selected_node.material.color.r,\n        //   g_selected_node.material.color.g,\n        //   g_selected_node.material.color.b\n        // )\n        // g_selected_node.material.color.set(0xff0000)\n      }\n    });\n    g_render_scene();\n  }, [nodeStore.currentNodeData]);\n  useEffect(() => {\n    if (g_selected_node && meshStore.selectedMeshData) {\n      const d = meshStore.selectedMeshData.find(data => data.nodeId === g_selected_node.name);\n\n      if (d) {\n        g_selected_node.children.forEach(child => {\n          child.visible = child.name === d.meshId;\n        });\n      }\n    }\n\n    g_render_scene();\n  }, [meshStore.selectedMeshData]);\n  useEffect(() => {\n    setNodeMaterial(g_selected_node, materialStore.currentMaterialData);\n  }, [materialStore.currentMaterialData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToggleDisplay, {\n      if: showLoader,\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.canvasContainer,\n      ref: canvasContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      style: {\n        maxWidth: '150px',\n        maxHeight: '100px',\n        minWidth: '50px',\n        minHeight: '50px',\n        position: \"absolute\",\n        right: \"0\",\n        bottom: \"0\",\n        margin: \"0px 20px 20px 0px\",\n        color: \"white\",\n        backgroundColor: \"#C53617\"\n      },\n      children: \"Checkout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      variant: \"contained\",\n      children: \"Total: 500$\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Viewer3D, \"VLnAyG77Cwy6c+/233nkC6ZVn4A=\");\n\n_c = Viewer3D;\n\nconst mapStateToProps = state => ({\n  materialStore: state.materialStore,\n  meshStore: state.meshStore,\n  nodeStore: state.nodeStore,\n  productStore: state.productStore,\n  setSelectedMeshData: PropTypes.func.isRequired,\n  setSelectedMeshMaterial: PropTypes.func.isRequired,\n  setCurrentNodeData: PropTypes.func.isRequired\n});\n\nexport default connect(mapStateToProps, {\n  setSelectedMeshData,\n  setSelectedMeshMaterial,\n  setCurrentNodeData\n})(Viewer3D);\n\nvar _c;\n\n$RefreshReg$(_c, \"Viewer3D\");","map":{"version":3,"names":["useEffect","useRef","useState","connect","PropTypes","ToggleDisplay","THREE","POSTPROCESSING","RGBELoader","GLTFLoader","DRACOLoader","PMREMGenerator","OrbitControls","Loader","styles","Composer","Lights","FitCameraToSelection","ShadowPlane","SPACE_SIZE","setSelectedMeshData","setSelectedMeshMaterial","setCurrentNodeData","FormControl","InputLabel","Select","Button","g_model_root","g_scene","g_camera","g_camera_controller","g_render","g_render_scene","g_selected_node","g_gltf_loader","g_texture_loader","g_rgbe_loader","g_is_load_model","Viewer3D","props","materialStore","meshStore","nodeStore","productStore","canvasContainer","showLoader","setShowLoader","setNodeMaterial","node","materialData","material","name","color","set","map","texture","load","uvScale","repeat","u","v","wrapS","wrapT","MirroredRepeatWrapping","normalMap","normalScale","Vector2","x","y","bumpMap","bumpScale","displacementMap","displacementScale","displacementBias","roughnessMap","roughness","metalnessMap","metalness","alphaMap","opacity","aoMap","aoMapIntensity","emissiveMap","emissiveIntensity","emissive","envMapIntensity","wireframe","transparent","needsUpdate","children","forEach","child","fetchMaterialData","path","response","fetch","data","json","width","current","offsetWidth","height","offsetHeight","renderRequested","smaaSearchImage","smaaAreaImage","clock","Clock","composer","Object3D","rayCaster","Raycaster","intersects","scene","Scene","background","Color","add","lighter","shadowPlane","camera","PerspectiveCamera","position","lookAt","resizeRendererToDisplaySize","canvasWidth","renderer","domElement","canvasHeight","needResize","aspect","updateProjectionMatrix","setSize","requestRenderIfNotRequested","render","cameraController","update","getDelta","requestAnimationFrame","WebGLRenderer","powerPreference","antialias","stencil","depth","setPixelRatio","window","devicePixelRatio","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","onMouseDown","event","onMouseUp","pickedPoint","offsetX","offsetY","setFromCamera","pickedObjs","intersectObjects","length","onMouseMove","document","body","style","cursor","onTouchStart","onTouchEnd","changedTouches","pageX","pageY","onTouchMove","addEventListener","minAzimuthAngle","maxAzimuthAngle","dampingFactor","screenSpacePanning","minPolarAngle","maxPolarAngle","Math","PI","enableDamping","enableZoom","enablePan","gltfLoadingManager","LoadingManager","onStart","url","itemsLoaded","itemsTotal","onProgress","onLoad","setTimeout","gLTFLoader","dracoLoader","setDecoderPath","setDRACOLoader","textureLoader","TextureLoader","smaaImageLoader","SMAAImageLoader","search","area","removeEventListener","innerHTML","productData","setDataType","UnsignedByteType","envMap","pg","compileEquirectangularShader","fromEquirectangular","environment","dispose","geometry","remove","currentDracoVersion","gltf","gltfMeshes","traverse","castShadow","push","nodes","pivot","id","candidateMeshes","gltfMesh","find","mesh","visible","defaultMesh","meshData","nodeId","meshId","MeshStandardMaterial","defaultMaterial","then","currentNodeData","selectedMeshData","d","currentMaterialData","maxWidth","maxHeight","minWidth","minHeight","right","bottom","margin","backgroundColor","mapStateToProps","state","func","isRequired"],"sources":["/Users/sam/Documents/CakeProject/src/components/Viewer3D/Viewer3D.js"],"sourcesContent":["import {useEffect, useRef, useState} from \"react\"\nimport {connect} from \"react-redux\"\nimport {PropTypes} from \"prop-types\"\nimport ToggleDisplay from \"react-toggle-display\"\nimport * as THREE from \"three\"\nimport * as POSTPROCESSING from \"postprocessing\"\nimport {RGBELoader} from \"three/examples/jsm/loaders/RGBELoader\"\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\"\nimport {DRACOLoader} from \"three/examples/jsm/loaders/DRACOLoader\"\nimport {PMREMGenerator} from \"three/src/extras/PMREMGenerator\"\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\"\nimport Loader from \"../Loader\"\nimport styles from \"./Viewer3D.module.css\"\nimport Composer from \"./libs/Composer\"\nimport Lights from \"./libs/Lights\"\nimport {FitCameraToSelection, ShadowPlane} from \"./libs/Helpers\"\nimport {SPACE_SIZE} from \"./Viewer3DConstants\"\nimport {setSelectedMeshData} from \"../../redux/actions/MeshActions\"\nimport {setSelectedMeshMaterial} from \"../../redux/actions/MaterialActions\"\nimport {setCurrentNodeData} from \"../../redux/actions/NodeActions\"\nimport {FormControl, InputLabel, Select} from \"@material-ui/core\"\nimport { Button } from \"@material-ui/core\"\n\n\nlet g_model_root\nlet g_scene\nlet g_camera\nlet g_camera_controller\nlet g_render\nlet g_render_scene\nlet g_selected_node\nlet g_gltf_loader\nlet g_texture_loader\nlet g_rgbe_loader\nlet g_is_load_model = false\n\nfunction Viewer3D(props) {\n  const {\n    materialStore,\n    meshStore,\n    nodeStore,\n    productStore,\n    setSelectedMeshData,\n    setSelectedMeshMaterial,\n    setCurrentNodeData,\n  } = props\n  const canvasContainer = useRef(null)\n  const [showLoader, setShowLoader] = useState(true)\n\n  function setNodeMaterial(node, materialData) {\n    if (node && materialData) {\n      node.material.name = materialData.name\n\n      //Color\n      if (materialData.color === \"\") {\n        node.material.color.set(null)\n      } else {\n        node.material.color.set(materialData.color)\n      }\n\n      //Albedo\n      if (materialData.map === \"\") {\n        node.material.map = null\n      } else {\n        const texture = g_texture_loader.load(materialData.map)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.map = texture\n      }\n\n      //Normal\n      if (materialData.normalMap === \"\") {\n        node.material.normalMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.normalMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.normalMap = texture\n\n        node.material.normalScale = new THREE.Vector2(\n          materialData.normalScale.x,\n          materialData.normalScale.y\n        )\n      }\n\n      //Bump\n      if (materialData.bumpMap === \"\") {\n        node.material.bumpMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.bumpMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.bumpMap = texture\n\n        node.material.bumpScale = materialData.bumpScale\n      }\n\n      //Displacement\n      if (materialData.displacementMap === \"\") {\n        node.material.displacementMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.displacementMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.displacementMap = texture\n\n        node.material.displacementScale = materialData.displacementScale\n        node.material.displacementBias = materialData.displacementBias\n      }\n\n      //Roughness\n      if (materialData.roughnessMap === \"\") {\n        node.material.roughnessMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.roughnessMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.roughnessMap = texture\n      }\n\n      node.material.roughness = materialData.roughness\n\n      //Metalness\n      if (materialData.metalnessMap !== \"\") {\n        node.material.metalnessMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.metalnessMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.metalnessMap = texture\n      }\n\n      node.material.metalness = materialData.metalness\n\n      //Alpha\n      if (materialData.alphaMap === \"\") {\n        node.material.alphaMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.alphaMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.alphaMap = texture\n      }\n\n      node.material.opacity = materialData.opacity\n\n      //AO\n      if (materialData.aoMap === \"\") {\n        node.material.aoMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.aoMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.aoMap = texture\n\n        node.material.aoMapIntensity = materialData.aoMapIntensity\n      }\n\n      //Emissive\n      if (materialData.emissiveMap === \"\") {\n        node.material.emissiveMap = null\n      } else {\n        const texture = g_texture_loader.load(materialData.emissiveMap)\n        if (materialData.uvScale) {\n          texture.repeat.set(materialData.uvScale.u, materialData.uvScale.v)\n          texture.wrapS = texture.wrapT = THREE.MirroredRepeatWrapping\n        }\n        node.material.emissiveMap = texture\n\n        node.material.emissiveIntensity = materialData.emissiveIntensity\n      }\n      node.material.emissive.set(materialData.emissive)\n\n      //Env\n      node.material.envMapIntensity = materialData.envMapIntensity\n\n      node.material.wireframe = materialData.wireframe\n      node.material.transparent = materialData.transparent\n      node.material.needsUpdate = true\n\n      //Set material to candidate meshes\n      node.children.forEach(child => {\n        child.material = node.material\n      })\n    }\n  }\n\n  async function fetchMaterialData(path) {\n    const response = await fetch(path)\n    const data = await response.json()\n    return data\n  }\n\n  useEffect(() => {\n    let width = canvasContainer.current.offsetWidth\n    let height = canvasContainer.current.offsetHeight\n\n    let renderRequested = false\n\n    let smaaSearchImage = null\n    let smaaAreaImage = null\n\n    const clock = new THREE.Clock()\n\n    let composer = null\n\n    g_model_root = new THREE.Object3D()\n    g_model_root.name = \"ModelRoot\"\n\n    const rayCaster = new THREE.Raycaster()\n    const intersects = []\n\n    /**\n     * Scene\n     */\n    const scene = new THREE.Scene()\n    scene.background = new THREE.Color(\"#aeaeae\")\n    // scene.fog = new THREE.Fog(0xa0a0a0, SPACE_SIZE * 0.9, SPACE_SIZE)\n    g_scene = scene\n\n    scene.add(g_model_root)\n\n    /**\n     * Lighter\n     */\n    const lighter = Lights()\n    scene.add(lighter)\n\n    /**\n     * Helper\n     */\n    // const axisHelper = new THREE.AxesHelper(5)\n    // scene.add(axisHelper)\n\n    const shadowPlane = ShadowPlane()\n    scene.add(shadowPlane)\n    /**\n     * Camera\n     */\n    const camera = new THREE.PerspectiveCamera(\n      30,\n      width / height,\n      0.01,\n      SPACE_SIZE * 100\n    )\n    camera.position.set(-SPACE_SIZE * 0.2, SPACE_SIZE, SPACE_SIZE)\n    camera.lookAt(0, 0, 0)\n    g_camera = camera\n\n    /**\n     * Resize & Render\n     */\n    function resizeRendererToDisplaySize() {\n      const canvasWidth = renderer.domElement.offsetWidth\n      const canvasHeight = renderer.domElement.offsetHeight\n      const needResize = canvasWidth !== width || canvasHeight !== height\n      if (needResize) {\n        width = canvasWidth\n        height = canvasHeight\n        camera.aspect = width / height\n        camera.updateProjectionMatrix()\n        renderer.setSize(width, height)\n        composer.setSize(width, height)\n        requestRenderIfNotRequested()\n      }\n    }\n\n    function render() {\n      renderRequested = false\n      resizeRendererToDisplaySize()\n      cameraController.update()\n      renderer.render(scene, camera)\n      if (composer) composer.render(clock.getDelta())\n    }\n\n    function requestRenderIfNotRequested() {\n      if (!renderRequested) {\n        renderRequested = true\n        requestAnimationFrame(render)\n      }\n    }\n    g_render_scene = requestRenderIfNotRequested\n\n    /**\n     * Renderer\n     */\n    const renderer = new THREE.WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: false,\n      stencil: false,\n      depth: false\n    })\n    renderer.setSize(width, height, false)\n    renderer.setPixelRatio(window.devicePixelRatio || 1)\n    renderer.shadowMap.enabled = true\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap\n    g_render = renderer\n\n    canvasContainer.current.appendChild(renderer.domElement)\n\n    //Mouse&Touch event\n    function onMouseDown(event) {}\n    function onMouseUp(event) {\n      const pickedPoint = new THREE.Vector2(\n        (event.offsetX / width) * 2 - 1,\n        -(event.offsetY / height) * 2 + 1\n      )\n      rayCaster.setFromCamera(pickedPoint, camera)\n      let pickedObjs = rayCaster.intersectObjects(intersects)\n      if (pickedObjs.length > 0) {\n      }\n    }\n    function onMouseMove(event) {\n      const pickedPoint = new THREE.Vector2(\n        (event.offsetX / width) * 2 - 1,\n        -(event.offsetY / height) * 2 + 1\n      )\n\n      rayCaster.setFromCamera(pickedPoint, camera)\n      let pickedObjs = rayCaster.intersectObjects(intersects)\n      if (pickedObjs.length > 0) {\n        document.body.style.cursor = \"pointer\"\n      } else {\n        document.body.style.cursor = \"default\"\n      }\n    }\n\n    function onTouchStart(event) {}\n    function onTouchEnd(event) {\n      const pickedPoint = new THREE.Vector2(\n        (event.changedTouches[0].pageX / width) * 2 - 1,\n        -(event.changedTouches[0].pageY / height) * 2 + 1\n      )\n      rayCaster.setFromCamera(pickedPoint, camera)\n      let pickedObjs = rayCaster.intersectObjects(intersects)\n      if (pickedObjs.length > 0) {\n      }\n    }\n    function onTouchMove() {}\n\n    renderer.domElement.addEventListener(\"mousedown\", onMouseDown)\n    renderer.domElement.addEventListener(\"mouseup\", onMouseUp)\n    renderer.domElement.addEventListener(\"mousemove\", onMouseMove)\n\n    renderer.domElement.addEventListener(\"touchstart\", onTouchStart)\n    renderer.domElement.addEventListener(\"touchend\", onTouchEnd)\n    renderer.domElement.addEventListener(\"touchmove\", onTouchMove)\n\n    /**\n     * Camera Controller\n     */\n    const cameraController = new OrbitControls(camera, renderer.domElement)\n    cameraController.minAzimuthAngle = -180\n    cameraController.maxAzimuthAngle = 180\n    cameraController.dampingFactor = 0.05\n    cameraController.screenSpacePanning = true\n    // cameraController.minDistance = 1\n    // cameraController.maxDistance = 500\n    // cameraController.minZoom = 1\n    // cameraController.maxZoom = 500\n    cameraController.minPolarAngle = 1\n    cameraController.maxPolarAngle = Math.PI / 1.5\n    cameraController.enableDamping = true\n    cameraController.enableZoom = true\n    cameraController.enablePan = false\n    g_camera_controller = cameraController\n\n    /**\n     * Load Assets\n     */\n    const gltfLoadingManager = new THREE.LoadingManager()\n    gltfLoadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n      setShowLoader(true)\n    }\n    gltfLoadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      if (!showLoader) {\n        setShowLoader(true)\n      }\n    }\n    gltfLoadingManager.onLoad = () => {\n      if (g_is_load_model) {\n        camera.position.set(-SPACE_SIZE * 0.2, SPACE_SIZE, SPACE_SIZE)\n        camera.lookAt(0, 0, 0)\n        FitCameraToSelection(camera, g_model_root, 6, cameraController)\n        g_is_load_model = false\n      }\n      requestRenderIfNotRequested()\n      setTimeout(() => {\n        setShowLoader(false)\n      }, 1200)\n    }\n    const gLTFLoader = new GLTFLoader(gltfLoadingManager)\n    g_gltf_loader = gLTFLoader\n\n    const dracoLoader = new DRACOLoader()\n    dracoLoader.setDecoderPath(\"/draco/\")\n    gLTFLoader.setDRACOLoader(dracoLoader)\n\n    const textureLoader = new THREE.TextureLoader(gltfLoadingManager)\n    g_texture_loader = textureLoader\n\n    //Load smaa images\n    const smaaImageLoader = new POSTPROCESSING.SMAAImageLoader(\n      gltfLoadingManager\n    )\n    smaaImageLoader.load(([search, area]) => {\n      smaaSearchImage = search\n      smaaAreaImage = area\n      composer = Composer(\n        renderer,\n        scene,\n        camera,\n        smaaSearchImage,\n        smaaAreaImage\n      )\n    })\n\n    //Load env map\n    g_rgbe_loader = new RGBELoader(gltfLoadingManager)\n\n    /**\n     * RenderEvent & Dispose\n     */\n    renderer.render(scene, camera)\n    cameraController.addEventListener(\"change\", requestRenderIfNotRequested)\n    window.addEventListener(\"resize\", requestRenderIfNotRequested)\n    return () => {\n      cameraController.removeEventListener(\n        \"change\",\n        requestRenderIfNotRequested\n      )\n      window.removeEventListener(\"resize\", requestRenderIfNotRequested)\n      if (canvasContainer.current) canvasContainer.current.innerHTML = \"\"\n    }\n  }, [])\n\n  useEffect(() => {\n    setCurrentNodeData(null)\n\n    //Set env\n    if (productStore.productData) {\n      g_rgbe_loader\n        .setDataType(THREE.UnsignedByteType)\n        .load(productStore.productData.envMap, texture => {\n          const pg = new PMREMGenerator(g_render)\n          pg.compileEquirectangularShader()\n          const envMap = pg.fromEquirectangular(texture).texture\n          g_scene.environment = envMap\n          // g_scene.background = envMap\n          texture.dispose()\n          pg.dispose()\n        })\n    }\n\n    //Clear\n    g_model_root.children.forEach(node => {\n      node.children.forEach(child => {\n        child.geometry.dispose()\n        child.material.dispose()\n        node.remove(child)\n      })\n      g_model_root.remove(node)\n    })\n    g_model_root.children = []\n\n    //Load models\n    if (productStore.productData) {\n      g_is_load_model = true\n      g_gltf_loader.load(\n        productStore.productData[productStore.currentDracoVersion],\n        gltf => {\n          if (gltf.scene) {\n            //Get gltf mesh\n            const gltfMeshes = []\n            gltf.scene.traverse(child => {\n              if (child.type === \"Mesh\") {\n                child.castShadow = true\n                gltfMeshes.push(child)\n              }\n            })\n\n            //Generate the model structure\n            productStore.productData.nodes.forEach(node => {\n              const pivot = new THREE.Object3D()\n              pivot.name = node.id\n              node.candidateMeshes.forEach(json => {\n                const gltfMesh = gltfMeshes.find(mesh => mesh.name === json.id)\n                if (gltfMesh) {\n                  gltfMesh.visible = gltfMesh.name === node.defaultMesh\n                  pivot.add(gltfMesh)\n                }\n              })\n              g_model_root.add(pivot)\n            })\n\n            //Set data for selected mesh\n            const meshData = []\n            productStore.productData.nodes.forEach(node => {\n              meshData.push({nodeId: node.id, meshId: node.defaultMesh})\n            })\n            setSelectedMeshData(meshData)\n\n            //Set default material\n            g_model_root.children.forEach(child => {\n              const material = new THREE.MeshStandardMaterial({\n                color: \"#363636\"\n              })\n              material.envMap = g_scene.environment\n              child.material = material\n\n              const materialData = productStore.productData.nodes.find(\n                node => node.id === child.name\n              )?.defaultMaterial\n              fetchMaterialData(materialData?.path).then(data => {\n                setNodeMaterial(child, data)\n              })\n            })\n          }\n        }\n      )\n    }\n    g_render_scene()\n  }, [productStore.productData, productStore.currentDracoVersion])\n\n  useEffect(() => {\n    if (g_selected_node) {\n      // g_selected_node.material.color.set(g_selected_node.originColor)\n      g_selected_node = null\n      setSelectedMeshMaterial(null)\n    }\n\n    \n    g_model_root?.traverse(child => {\n      if (\n        child.type === \"Object3D\" &&\n        child.name === nodeStore.currentNodeData?.id\n      ) {\n        g_selected_node = child\n        setSelectedMeshMaterial(child.material.name)\n        // g_selected_node.originColor = new THREE.Color(\n        //   g_selected_node.material.color.r,\n        //   g_selected_node.material.color.g,\n        //   g_selected_node.material.color.b\n        // )\n        // g_selected_node.material.color.set(0xff0000)\n      }\n    })\n    g_render_scene()\n  }, [nodeStore.currentNodeData])\n\n  useEffect(() => {\n    if (g_selected_node && meshStore.selectedMeshData) {\n      const d = meshStore.selectedMeshData.find(\n        data => data.nodeId === g_selected_node.name\n      )\n      if (d) {\n        g_selected_node.children.forEach(child => {\n          child.visible = child.name === d.meshId\n        })\n      }\n    }\n\n    g_render_scene()\n  }, [meshStore.selectedMeshData])\n\n\n  \n\n  useEffect(() => {\n    \n    setNodeMaterial(g_selected_node, materialStore.currentMaterialData)\n  }, [materialStore.currentMaterialData])\n\n  return (\n    <>\n      <ToggleDisplay if={showLoader}>\n        <Loader />\n      </ToggleDisplay>\n      <div className={styles.canvasContainer} ref={canvasContainer}></div>\n\n      \n\n      <Button variant=\"contained\"  style={{ maxWidth: '150px', maxHeight: '100px', minWidth: '50px', minHeight: '50px', position: \"absolute\", right: \"0\", bottom:\"0\", margin:\"0px 20px 20px 0px\" , color:\"white\", backgroundColor: \"#C53617\"}} >Checkout</Button>\n      <h1 variant=\"contained\">Total: 500$</h1>\n    </>\n  )\n}\n\nconst mapStateToProps = state => ({\n  materialStore: state.materialStore,\n  meshStore: state.meshStore,\n  nodeStore: state.nodeStore,\n  productStore: state.productStore,\n  setSelectedMeshData: PropTypes.func.isRequired,\n  setSelectedMeshMaterial: PropTypes.func.isRequired,\n  setCurrentNodeData: PropTypes.func.isRequired\n})\n\nexport default connect(mapStateToProps, {\n  setSelectedMeshData,\n  setSelectedMeshMaterial,\n  setCurrentNodeData\n})(Viewer3D)\n"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,QAAwB,YAAxB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,cAAZ,MAAgC,gBAAhC;AACA,SAAQC,UAAR,QAAyB,uCAAzB;AACA,SAAQC,UAAR,QAAyB,uCAAzB;AACA,SAAQC,WAAR,QAA0B,wCAA1B;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,aAAR,QAA4B,2CAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAAQC,oBAAR,EAA8BC,WAA9B,QAAgD,gBAAhD;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,mBAAR,QAAkC,iCAAlC;AACA,SAAQC,uBAAR,QAAsC,qCAAtC;AACA,SAAQC,kBAAR,QAAiC,iCAAjC;AACA,SAAQC,WAAR,EAAqBC,UAArB,EAAiCC,MAAjC,QAA8C,mBAA9C;AACA,SAASC,MAAT,QAAuB,mBAAvB;;;AAGA,IAAIC,YAAJ;AACA,IAAIC,OAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,mBAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,cAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,eAAe,GAAG,KAAtB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EACvB,MAAM;IACJC,aADI;IAEJC,SAFI;IAGJC,SAHI;IAIJC,YAJI;IAKJvB,mBALI;IAMJC,uBANI;IAOJC;EAPI,IAQFiB,KARJ;EASA,MAAMK,eAAe,GAAG3C,MAAM,CAAC,IAAD,CAA9B;EACA,MAAM,CAAC4C,UAAD,EAAaC,aAAb,IAA8B5C,QAAQ,CAAC,IAAD,CAA5C;;EAEA,SAAS6C,eAAT,CAAyBC,IAAzB,EAA+BC,YAA/B,EAA6C;IAC3C,IAAID,IAAI,IAAIC,YAAZ,EAA0B;MACxBD,IAAI,CAACE,QAAL,CAAcC,IAAd,GAAqBF,YAAY,CAACE,IAAlC,CADwB,CAGxB;;MACA,IAAIF,YAAY,CAACG,KAAb,KAAuB,EAA3B,EAA+B;QAC7BJ,IAAI,CAACE,QAAL,CAAcE,KAAd,CAAoBC,GAApB,CAAwB,IAAxB;MACD,CAFD,MAEO;QACLL,IAAI,CAACE,QAAL,CAAcE,KAAd,CAAoBC,GAApB,CAAwBJ,YAAY,CAACG,KAArC;MACD,CARuB,CAUxB;;;MACA,IAAIH,YAAY,CAACK,GAAb,KAAqB,EAAzB,EAA6B;QAC3BN,IAAI,CAACE,QAAL,CAAcI,GAAd,GAAoB,IAApB;MACD,CAFD,MAEO;QACL,MAAMC,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAACK,GAAnC,CAAhB;;QACA,IAAIL,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAcI,GAAd,GAAoBC,OAApB;MACD,CApBuB,CAsBxB;;;MACA,IAAIN,YAAY,CAACe,SAAb,KAA2B,EAA/B,EAAmC;QACjChB,IAAI,CAACE,QAAL,CAAcc,SAAd,GAA0B,IAA1B;MACD,CAFD,MAEO;QACL,MAAMT,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAACe,SAAnC,CAAhB;;QACA,IAAIf,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAcc,SAAd,GAA0BT,OAA1B;QAEAP,IAAI,CAACE,QAAL,CAAce,WAAd,GAA4B,IAAI3D,KAAK,CAAC4D,OAAV,CAC1BjB,YAAY,CAACgB,WAAb,CAAyBE,CADC,EAE1BlB,YAAY,CAACgB,WAAb,CAAyBG,CAFC,CAA5B;MAID,CArCuB,CAuCxB;;;MACA,IAAInB,YAAY,CAACoB,OAAb,KAAyB,EAA7B,EAAiC;QAC/BrB,IAAI,CAACE,QAAL,CAAcmB,OAAd,GAAwB,IAAxB;MACD,CAFD,MAEO;QACL,MAAMd,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAACoB,OAAnC,CAAhB;;QACA,IAAIpB,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAcmB,OAAd,GAAwBd,OAAxB;QAEAP,IAAI,CAACE,QAAL,CAAcoB,SAAd,GAA0BrB,YAAY,CAACqB,SAAvC;MACD,CAnDuB,CAqDxB;;;MACA,IAAIrB,YAAY,CAACsB,eAAb,KAAiC,EAArC,EAAyC;QACvCvB,IAAI,CAACE,QAAL,CAAcqB,eAAd,GAAgC,IAAhC;MACD,CAFD,MAEO;QACL,MAAMhB,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAACsB,eAAnC,CAAhB;;QACA,IAAItB,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAcqB,eAAd,GAAgChB,OAAhC;QAEAP,IAAI,CAACE,QAAL,CAAcsB,iBAAd,GAAkCvB,YAAY,CAACuB,iBAA/C;QACAxB,IAAI,CAACE,QAAL,CAAcuB,gBAAd,GAAiCxB,YAAY,CAACwB,gBAA9C;MACD,CAlEuB,CAoExB;;;MACA,IAAIxB,YAAY,CAACyB,YAAb,KAA8B,EAAlC,EAAsC;QACpC1B,IAAI,CAACE,QAAL,CAAcwB,YAAd,GAA6B,IAA7B;MACD,CAFD,MAEO;QACL,MAAMnB,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAACyB,YAAnC,CAAhB;;QACA,IAAIzB,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAcwB,YAAd,GAA6BnB,OAA7B;MACD;;MAEDP,IAAI,CAACE,QAAL,CAAcyB,SAAd,GAA0B1B,YAAY,CAAC0B,SAAvC,CAhFwB,CAkFxB;;MACA,IAAI1B,YAAY,CAAC2B,YAAb,KAA8B,EAAlC,EAAsC;QACpC5B,IAAI,CAACE,QAAL,CAAc0B,YAAd,GAA6B,IAA7B;MACD,CAFD,MAEO;QACL,MAAMrB,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAAC2B,YAAnC,CAAhB;;QACA,IAAI3B,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAc0B,YAAd,GAA6BrB,OAA7B;MACD;;MAEDP,IAAI,CAACE,QAAL,CAAc2B,SAAd,GAA0B5B,YAAY,CAAC4B,SAAvC,CA9FwB,CAgGxB;;MACA,IAAI5B,YAAY,CAAC6B,QAAb,KAA0B,EAA9B,EAAkC;QAChC9B,IAAI,CAACE,QAAL,CAAc4B,QAAd,GAAyB,IAAzB;MACD,CAFD,MAEO;QACL,MAAMvB,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAAC6B,QAAnC,CAAhB;;QACA,IAAI7B,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAc4B,QAAd,GAAyBvB,OAAzB;MACD;;MAEDP,IAAI,CAACE,QAAL,CAAc6B,OAAd,GAAwB9B,YAAY,CAAC8B,OAArC,CA5GwB,CA8GxB;;MACA,IAAI9B,YAAY,CAAC+B,KAAb,KAAuB,EAA3B,EAA+B;QAC7BhC,IAAI,CAACE,QAAL,CAAc8B,KAAd,GAAsB,IAAtB;MACD,CAFD,MAEO;QACL,MAAMzB,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAAC+B,KAAnC,CAAhB;;QACA,IAAI/B,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAc8B,KAAd,GAAsBzB,OAAtB;QAEAP,IAAI,CAACE,QAAL,CAAc+B,cAAd,GAA+BhC,YAAY,CAACgC,cAA5C;MACD,CA1HuB,CA4HxB;;;MACA,IAAIhC,YAAY,CAACiC,WAAb,KAA6B,EAAjC,EAAqC;QACnClC,IAAI,CAACE,QAAL,CAAcgC,WAAd,GAA4B,IAA5B;MACD,CAFD,MAEO;QACL,MAAM3B,OAAO,GAAGpB,gBAAgB,CAACqB,IAAjB,CAAsBP,YAAY,CAACiC,WAAnC,CAAhB;;QACA,IAAIjC,YAAY,CAACQ,OAAjB,EAA0B;UACxBF,OAAO,CAACG,MAAR,CAAeL,GAAf,CAAmBJ,YAAY,CAACQ,OAAb,CAAqBE,CAAxC,EAA2CV,YAAY,CAACQ,OAAb,CAAqBG,CAAhE;UACAL,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAR,GAAgBxD,KAAK,CAACyD,sBAAtC;QACD;;QACDf,IAAI,CAACE,QAAL,CAAcgC,WAAd,GAA4B3B,OAA5B;QAEAP,IAAI,CAACE,QAAL,CAAciC,iBAAd,GAAkClC,YAAY,CAACkC,iBAA/C;MACD;;MACDnC,IAAI,CAACE,QAAL,CAAckC,QAAd,CAAuB/B,GAAvB,CAA2BJ,YAAY,CAACmC,QAAxC,EAzIwB,CA2IxB;;MACApC,IAAI,CAACE,QAAL,CAAcmC,eAAd,GAAgCpC,YAAY,CAACoC,eAA7C;MAEArC,IAAI,CAACE,QAAL,CAAcoC,SAAd,GAA0BrC,YAAY,CAACqC,SAAvC;MACAtC,IAAI,CAACE,QAAL,CAAcqC,WAAd,GAA4BtC,YAAY,CAACsC,WAAzC;MACAvC,IAAI,CAACE,QAAL,CAAcsC,WAAd,GAA4B,IAA5B,CAhJwB,CAkJxB;;MACAxC,IAAI,CAACyC,QAAL,CAAcC,OAAd,CAAsBC,KAAK,IAAI;QAC7BA,KAAK,CAACzC,QAAN,GAAiBF,IAAI,CAACE,QAAtB;MACD,CAFD;IAGD;EACF;;EAED,eAAe0C,iBAAf,CAAiCC,IAAjC,EAAuC;IACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,IAAD,CAA5B;IACA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;IACA,OAAOD,IAAP;EACD;;EAEDhG,SAAS,CAAC,MAAM;IACd,IAAIkG,KAAK,GAAGtD,eAAe,CAACuD,OAAhB,CAAwBC,WAApC;IACA,IAAIC,MAAM,GAAGzD,eAAe,CAACuD,OAAhB,CAAwBG,YAArC;IAEA,IAAIC,eAAe,GAAG,KAAtB;IAEA,IAAIC,eAAe,GAAG,IAAtB;IACA,IAAIC,aAAa,GAAG,IAApB;IAEA,MAAMC,KAAK,GAAG,IAAIpG,KAAK,CAACqG,KAAV,EAAd;IAEA,IAAIC,QAAQ,GAAG,IAAf;IAEAjF,YAAY,GAAG,IAAIrB,KAAK,CAACuG,QAAV,EAAf;IACAlF,YAAY,CAACwB,IAAb,GAAoB,WAApB;IAEA,MAAM2D,SAAS,GAAG,IAAIxG,KAAK,CAACyG,SAAV,EAAlB;IACA,MAAMC,UAAU,GAAG,EAAnB;IAEA;AACJ;AACA;;IACI,MAAMC,KAAK,GAAG,IAAI3G,KAAK,CAAC4G,KAAV,EAAd;IACAD,KAAK,CAACE,UAAN,GAAmB,IAAI7G,KAAK,CAAC8G,KAAV,CAAgB,SAAhB,CAAnB,CAvBc,CAwBd;;IACAxF,OAAO,GAAGqF,KAAV;IAEAA,KAAK,CAACI,GAAN,CAAU1F,YAAV;IAEA;AACJ;AACA;;IACI,MAAM2F,OAAO,GAAGtG,MAAM,EAAtB;IACAiG,KAAK,CAACI,GAAN,CAAUC,OAAV;IAEA;AACJ;AACA;IACI;IACA;;IAEA,MAAMC,WAAW,GAAGrG,WAAW,EAA/B;IACA+F,KAAK,CAACI,GAAN,CAAUE,WAAV;IACA;AACJ;AACA;;IACI,MAAMC,MAAM,GAAG,IAAIlH,KAAK,CAACmH,iBAAV,CACb,EADa,EAEbvB,KAAK,GAAGG,MAFK,EAGb,IAHa,EAIblF,UAAU,GAAG,GAJA,CAAf;IAMAqG,MAAM,CAACE,QAAP,CAAgBrE,GAAhB,CAAoB,CAAClC,UAAD,GAAc,GAAlC,EAAuCA,UAAvC,EAAmDA,UAAnD;IACAqG,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;IACA9F,QAAQ,GAAG2F,MAAX;IAEA;AACJ;AACA;;IACI,SAASI,2BAAT,GAAuC;MACrC,MAAMC,WAAW,GAAGC,QAAQ,CAACC,UAAT,CAAoB3B,WAAxC;MACA,MAAM4B,YAAY,GAAGF,QAAQ,CAACC,UAAT,CAAoBzB,YAAzC;MACA,MAAM2B,UAAU,GAAGJ,WAAW,KAAK3B,KAAhB,IAAyB8B,YAAY,KAAK3B,MAA7D;;MACA,IAAI4B,UAAJ,EAAgB;QACd/B,KAAK,GAAG2B,WAAR;QACAxB,MAAM,GAAG2B,YAAT;QACAR,MAAM,CAACU,MAAP,GAAgBhC,KAAK,GAAGG,MAAxB;QACAmB,MAAM,CAACW,sBAAP;QACAL,QAAQ,CAACM,OAAT,CAAiBlC,KAAjB,EAAwBG,MAAxB;QACAO,QAAQ,CAACwB,OAAT,CAAiBlC,KAAjB,EAAwBG,MAAxB;QACAgC,2BAA2B;MAC5B;IACF;;IAED,SAASC,MAAT,GAAkB;MAChB/B,eAAe,GAAG,KAAlB;MACAqB,2BAA2B;MAC3BW,gBAAgB,CAACC,MAAjB;MACAV,QAAQ,CAACQ,MAAT,CAAgBrB,KAAhB,EAAuBO,MAAvB;MACA,IAAIZ,QAAJ,EAAcA,QAAQ,CAAC0B,MAAT,CAAgB5B,KAAK,CAAC+B,QAAN,EAAhB;IACf;;IAED,SAASJ,2BAAT,GAAuC;MACrC,IAAI,CAAC9B,eAAL,EAAsB;QACpBA,eAAe,GAAG,IAAlB;QACAmC,qBAAqB,CAACJ,MAAD,CAArB;MACD;IACF;;IACDtG,cAAc,GAAGqG,2BAAjB;IAEA;AACJ;AACA;;IACI,MAAMP,QAAQ,GAAG,IAAIxH,KAAK,CAACqI,aAAV,CAAwB;MACvCC,eAAe,EAAE,kBADsB;MAEvCC,SAAS,EAAE,KAF4B;MAGvCC,OAAO,EAAE,KAH8B;MAIvCC,KAAK,EAAE;IAJgC,CAAxB,CAAjB;IAMAjB,QAAQ,CAACM,OAAT,CAAiBlC,KAAjB,EAAwBG,MAAxB,EAAgC,KAAhC;IACAyB,QAAQ,CAACkB,aAAT,CAAuBC,MAAM,CAACC,gBAAP,IAA2B,CAAlD;IACApB,QAAQ,CAACqB,SAAT,CAAmBC,OAAnB,GAA6B,IAA7B;IACAtB,QAAQ,CAACqB,SAAT,CAAmBE,IAAnB,GAA0B/I,KAAK,CAACgJ,gBAAhC;IACAvH,QAAQ,GAAG+F,QAAX;IAEAlF,eAAe,CAACuD,OAAhB,CAAwBoD,WAAxB,CAAoCzB,QAAQ,CAACC,UAA7C,EAzGc,CA2Gd;;IACA,SAASyB,WAAT,CAAqBC,KAArB,EAA4B,CAAE;;IAC9B,SAASC,SAAT,CAAmBD,KAAnB,EAA0B;MACxB,MAAME,WAAW,GAAG,IAAIrJ,KAAK,CAAC4D,OAAV,CACjBuF,KAAK,CAACG,OAAN,GAAgB1D,KAAjB,GAA0B,CAA1B,GAA8B,CADZ,EAElB,EAAEuD,KAAK,CAACI,OAAN,GAAgBxD,MAAlB,IAA4B,CAA5B,GAAgC,CAFd,CAApB;MAIAS,SAAS,CAACgD,aAAV,CAAwBH,WAAxB,EAAqCnC,MAArC;MACA,IAAIuC,UAAU,GAAGjD,SAAS,CAACkD,gBAAV,CAA2BhD,UAA3B,CAAjB;;MACA,IAAI+C,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B,CAC1B;IACF;;IACD,SAASC,WAAT,CAAqBT,KAArB,EAA4B;MAC1B,MAAME,WAAW,GAAG,IAAIrJ,KAAK,CAAC4D,OAAV,CACjBuF,KAAK,CAACG,OAAN,GAAgB1D,KAAjB,GAA0B,CAA1B,GAA8B,CADZ,EAElB,EAAEuD,KAAK,CAACI,OAAN,GAAgBxD,MAAlB,IAA4B,CAA5B,GAAgC,CAFd,CAApB;MAKAS,SAAS,CAACgD,aAAV,CAAwBH,WAAxB,EAAqCnC,MAArC;MACA,IAAIuC,UAAU,GAAGjD,SAAS,CAACkD,gBAAV,CAA2BhD,UAA3B,CAAjB;;MACA,IAAI+C,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;QACzBE,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,MAApB,GAA6B,SAA7B;MACD,CAFD,MAEO;QACLH,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,MAApB,GAA6B,SAA7B;MACD;IACF;;IAED,SAASC,YAAT,CAAsBd,KAAtB,EAA6B,CAAE;;IAC/B,SAASe,UAAT,CAAoBf,KAApB,EAA2B;MACzB,MAAME,WAAW,GAAG,IAAIrJ,KAAK,CAAC4D,OAAV,CACjBuF,KAAK,CAACgB,cAAN,CAAqB,CAArB,EAAwBC,KAAxB,GAAgCxE,KAAjC,GAA0C,CAA1C,GAA8C,CAD5B,EAElB,EAAEuD,KAAK,CAACgB,cAAN,CAAqB,CAArB,EAAwBE,KAAxB,GAAgCtE,MAAlC,IAA4C,CAA5C,GAAgD,CAF9B,CAApB;MAIAS,SAAS,CAACgD,aAAV,CAAwBH,WAAxB,EAAqCnC,MAArC;MACA,IAAIuC,UAAU,GAAGjD,SAAS,CAACkD,gBAAV,CAA2BhD,UAA3B,CAAjB;;MACA,IAAI+C,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B,CAC1B;IACF;;IACD,SAASW,WAAT,GAAuB,CAAE;;IAEzB9C,QAAQ,CAACC,UAAT,CAAoB8C,gBAApB,CAAqC,WAArC,EAAkDrB,WAAlD;IACA1B,QAAQ,CAACC,UAAT,CAAoB8C,gBAApB,CAAqC,SAArC,EAAgDnB,SAAhD;IACA5B,QAAQ,CAACC,UAAT,CAAoB8C,gBAApB,CAAqC,WAArC,EAAkDX,WAAlD;IAEApC,QAAQ,CAACC,UAAT,CAAoB8C,gBAApB,CAAqC,YAArC,EAAmDN,YAAnD;IACAzC,QAAQ,CAACC,UAAT,CAAoB8C,gBAApB,CAAqC,UAArC,EAAiDL,UAAjD;IACA1C,QAAQ,CAACC,UAAT,CAAoB8C,gBAApB,CAAqC,WAArC,EAAkDD,WAAlD;IAEA;AACJ;AACA;;IACI,MAAMrC,gBAAgB,GAAG,IAAI3H,aAAJ,CAAkB4G,MAAlB,EAA0BM,QAAQ,CAACC,UAAnC,CAAzB;IACAQ,gBAAgB,CAACuC,eAAjB,GAAmC,CAAC,GAApC;IACAvC,gBAAgB,CAACwC,eAAjB,GAAmC,GAAnC;IACAxC,gBAAgB,CAACyC,aAAjB,GAAiC,IAAjC;IACAzC,gBAAgB,CAAC0C,kBAAjB,GAAsC,IAAtC,CAlKc,CAmKd;IACA;IACA;IACA;;IACA1C,gBAAgB,CAAC2C,aAAjB,GAAiC,CAAjC;IACA3C,gBAAgB,CAAC4C,aAAjB,GAAiCC,IAAI,CAACC,EAAL,GAAU,GAA3C;IACA9C,gBAAgB,CAAC+C,aAAjB,GAAiC,IAAjC;IACA/C,gBAAgB,CAACgD,UAAjB,GAA8B,IAA9B;IACAhD,gBAAgB,CAACiD,SAAjB,GAA6B,KAA7B;IACA1J,mBAAmB,GAAGyG,gBAAtB;IAEA;AACJ;AACA;;IACI,MAAMkD,kBAAkB,GAAG,IAAInL,KAAK,CAACoL,cAAV,EAA3B;;IACAD,kBAAkB,CAACE,OAAnB,GAA6B,CAACC,GAAD,EAAMC,WAAN,EAAmBC,UAAnB,KAAkC;MAC7DhJ,aAAa,CAAC,IAAD,CAAb;IACD,CAFD;;IAGA2I,kBAAkB,CAACM,UAAnB,GAAgC,CAACH,GAAD,EAAMC,WAAN,EAAmBC,UAAnB,KAAkC;MAChE,IAAI,CAACjJ,UAAL,EAAiB;QACfC,aAAa,CAAC,IAAD,CAAb;MACD;IACF,CAJD;;IAKA2I,kBAAkB,CAACO,MAAnB,GAA4B,MAAM;MAChC,IAAI3J,eAAJ,EAAqB;QACnBmF,MAAM,CAACE,QAAP,CAAgBrE,GAAhB,CAAoB,CAAClC,UAAD,GAAc,GAAlC,EAAuCA,UAAvC,EAAmDA,UAAnD;QACAqG,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;QACA1G,oBAAoB,CAACuG,MAAD,EAAS7F,YAAT,EAAuB,CAAvB,EAA0B4G,gBAA1B,CAApB;QACAlG,eAAe,GAAG,KAAlB;MACD;;MACDgG,2BAA2B;MAC3B4D,UAAU,CAAC,MAAM;QACfnJ,aAAa,CAAC,KAAD,CAAb;MACD,CAFS,EAEP,IAFO,CAAV;IAGD,CAXD;;IAYA,MAAMoJ,UAAU,GAAG,IAAIzL,UAAJ,CAAegL,kBAAf,CAAnB;IACAvJ,aAAa,GAAGgK,UAAhB;IAEA,MAAMC,WAAW,GAAG,IAAIzL,WAAJ,EAApB;IACAyL,WAAW,CAACC,cAAZ,CAA2B,SAA3B;IACAF,UAAU,CAACG,cAAX,CAA0BF,WAA1B;IAEA,MAAMG,aAAa,GAAG,IAAIhM,KAAK,CAACiM,aAAV,CAAwBd,kBAAxB,CAAtB;IACAtJ,gBAAgB,GAAGmK,aAAnB,CA9Mc,CAgNd;;IACA,MAAME,eAAe,GAAG,IAAIjM,cAAc,CAACkM,eAAnB,CACtBhB,kBADsB,CAAxB;IAGAe,eAAe,CAAChJ,IAAhB,CAAqB,QAAoB;MAAA,IAAnB,CAACkJ,MAAD,EAASC,IAAT,CAAmB;MACvCnG,eAAe,GAAGkG,MAAlB;MACAjG,aAAa,GAAGkG,IAAhB;MACA/F,QAAQ,GAAG7F,QAAQ,CACjB+G,QADiB,EAEjBb,KAFiB,EAGjBO,MAHiB,EAIjBhB,eAJiB,EAKjBC,aALiB,CAAnB;IAOD,CAVD,EApNc,CAgOd;;IACArE,aAAa,GAAG,IAAI5B,UAAJ,CAAeiL,kBAAf,CAAhB;IAEA;AACJ;AACA;;IACI3D,QAAQ,CAACQ,MAAT,CAAgBrB,KAAhB,EAAuBO,MAAvB;IACAe,gBAAgB,CAACsC,gBAAjB,CAAkC,QAAlC,EAA4CxC,2BAA5C;IACAY,MAAM,CAAC4B,gBAAP,CAAwB,QAAxB,EAAkCxC,2BAAlC;IACA,OAAO,MAAM;MACXE,gBAAgB,CAACqE,mBAAjB,CACE,QADF,EAEEvE,2BAFF;MAIAY,MAAM,CAAC2D,mBAAP,CAA2B,QAA3B,EAAqCvE,2BAArC;MACA,IAAIzF,eAAe,CAACuD,OAApB,EAA6BvD,eAAe,CAACuD,OAAhB,CAAwB0G,SAAxB,GAAoC,EAApC;IAC9B,CAPD;EAQD,CAjPQ,EAiPN,EAjPM,CAAT;EAmPA7M,SAAS,CAAC,MAAM;IACdsB,kBAAkB,CAAC,IAAD,CAAlB,CADc,CAGd;;IACA,IAAIqB,YAAY,CAACmK,WAAjB,EAA8B;MAC5B1K,aAAa,CACV2K,WADH,CACezM,KAAK,CAAC0M,gBADrB,EAEGxJ,IAFH,CAEQb,YAAY,CAACmK,WAAb,CAAyBG,MAFjC,EAEyC1J,OAAO,IAAI;QAChD,MAAM2J,EAAE,GAAG,IAAIvM,cAAJ,CAAmBoB,QAAnB,CAAX;QACAmL,EAAE,CAACC,4BAAH;QACA,MAAMF,MAAM,GAAGC,EAAE,CAACE,mBAAH,CAAuB7J,OAAvB,EAAgCA,OAA/C;QACA3B,OAAO,CAACyL,WAAR,GAAsBJ,MAAtB,CAJgD,CAKhD;;QACA1J,OAAO,CAAC+J,OAAR;QACAJ,EAAE,CAACI,OAAH;MACD,CAVH;IAWD,CAhBa,CAkBd;;;IACA3L,YAAY,CAAC8D,QAAb,CAAsBC,OAAtB,CAA8B1C,IAAI,IAAI;MACpCA,IAAI,CAACyC,QAAL,CAAcC,OAAd,CAAsBC,KAAK,IAAI;QAC7BA,KAAK,CAAC4H,QAAN,CAAeD,OAAf;QACA3H,KAAK,CAACzC,QAAN,CAAeoK,OAAf;QACAtK,IAAI,CAACwK,MAAL,CAAY7H,KAAZ;MACD,CAJD;MAKAhE,YAAY,CAAC6L,MAAb,CAAoBxK,IAApB;IACD,CAPD;IAQArB,YAAY,CAAC8D,QAAb,GAAwB,EAAxB,CA3Bc,CA6Bd;;IACA,IAAI9C,YAAY,CAACmK,WAAjB,EAA8B;MAC5BzK,eAAe,GAAG,IAAlB;MACAH,aAAa,CAACsB,IAAd,CACEb,YAAY,CAACmK,WAAb,CAAyBnK,YAAY,CAAC8K,mBAAtC,CADF,EAEEC,IAAI,IAAI;QACN,IAAIA,IAAI,CAACzG,KAAT,EAAgB;UACd;UACA,MAAM0G,UAAU,GAAG,EAAnB;UACAD,IAAI,CAACzG,KAAL,CAAW2G,QAAX,CAAoBjI,KAAK,IAAI;YAC3B,IAAIA,KAAK,CAAC0D,IAAN,KAAe,MAAnB,EAA2B;cACzB1D,KAAK,CAACkI,UAAN,GAAmB,IAAnB;cACAF,UAAU,CAACG,IAAX,CAAgBnI,KAAhB;YACD;UACF,CALD,EAHc,CAUd;;UACAhD,YAAY,CAACmK,WAAb,CAAyBiB,KAAzB,CAA+BrI,OAA/B,CAAuC1C,IAAI,IAAI;YAC7C,MAAMgL,KAAK,GAAG,IAAI1N,KAAK,CAACuG,QAAV,EAAd;YACAmH,KAAK,CAAC7K,IAAN,GAAaH,IAAI,CAACiL,EAAlB;YACAjL,IAAI,CAACkL,eAAL,CAAqBxI,OAArB,CAA6BO,IAAI,IAAI;cACnC,MAAMkI,QAAQ,GAAGR,UAAU,CAACS,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAAClL,IAAL,KAAc8C,IAAI,CAACgI,EAA3C,CAAjB;;cACA,IAAIE,QAAJ,EAAc;gBACZA,QAAQ,CAACG,OAAT,GAAmBH,QAAQ,CAAChL,IAAT,KAAkBH,IAAI,CAACuL,WAA1C;gBACAP,KAAK,CAAC3G,GAAN,CAAU8G,QAAV;cACD;YACF,CAND;YAOAxM,YAAY,CAAC0F,GAAb,CAAiB2G,KAAjB;UACD,CAXD,EAXc,CAwBd;;UACA,MAAMQ,QAAQ,GAAG,EAAjB;UACA7L,YAAY,CAACmK,WAAb,CAAyBiB,KAAzB,CAA+BrI,OAA/B,CAAuC1C,IAAI,IAAI;YAC7CwL,QAAQ,CAACV,IAAT,CAAc;cAACW,MAAM,EAAEzL,IAAI,CAACiL,EAAd;cAAkBS,MAAM,EAAE1L,IAAI,CAACuL;YAA/B,CAAd;UACD,CAFD;UAGAnN,mBAAmB,CAACoN,QAAD,CAAnB,CA7Bc,CA+Bd;;UACA7M,YAAY,CAAC8D,QAAb,CAAsBC,OAAtB,CAA8BC,KAAK,IAAI;YAAA;;YACrC,MAAMzC,QAAQ,GAAG,IAAI5C,KAAK,CAACqO,oBAAV,CAA+B;cAC9CvL,KAAK,EAAE;YADuC,CAA/B,CAAjB;YAGAF,QAAQ,CAAC+J,MAAT,GAAkBrL,OAAO,CAACyL,WAA1B;YACA1H,KAAK,CAACzC,QAAN,GAAiBA,QAAjB;YAEA,MAAMD,YAAY,4BAAGN,YAAY,CAACmK,WAAb,CAAyBiB,KAAzB,CAA+BK,IAA/B,CACnBpL,IAAI,IAAIA,IAAI,CAACiL,EAAL,KAAYtI,KAAK,CAACxC,IADP,CAAH,0DAAG,sBAElByL,eAFH;YAGAhJ,iBAAiB,CAAC3C,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAE4C,IAAf,CAAjB,CAAsCgJ,IAAtC,CAA2C7I,IAAI,IAAI;cACjDjD,eAAe,CAAC4C,KAAD,EAAQK,IAAR,CAAf;YACD,CAFD;UAGD,CAbD;QAcD;MACF,CAlDH;IAoDD;;IACDhE,cAAc;EACf,CAtFQ,EAsFN,CAACW,YAAY,CAACmK,WAAd,EAA2BnK,YAAY,CAAC8K,mBAAxC,CAtFM,CAAT;EAwFAzN,SAAS,CAAC,MAAM;IAAA;;IACd,IAAIiC,eAAJ,EAAqB;MACnB;MACAA,eAAe,GAAG,IAAlB;MACAZ,uBAAuB,CAAC,IAAD,CAAvB;IACD;;IAGD,iBAAAM,YAAY,UAAZ,sDAAciM,QAAd,CAAuBjI,KAAK,IAAI;MAAA;;MAC9B,IACEA,KAAK,CAAC0D,IAAN,KAAe,UAAf,IACA1D,KAAK,CAACxC,IAAN,+BAAeT,SAAS,CAACoM,eAAzB,0DAAe,sBAA2Bb,EAA1C,CAFF,EAGE;QACAhM,eAAe,GAAG0D,KAAlB;QACAtE,uBAAuB,CAACsE,KAAK,CAACzC,QAAN,CAAeC,IAAhB,CAAvB,CAFA,CAGA;QACA;QACA;QACA;QACA;QACA;MACD;IACF,CAdD;IAeAnB,cAAc;EACf,CAxBQ,EAwBN,CAACU,SAAS,CAACoM,eAAX,CAxBM,CAAT;EA0BA9O,SAAS,CAAC,MAAM;IACd,IAAIiC,eAAe,IAAIQ,SAAS,CAACsM,gBAAjC,EAAmD;MACjD,MAAMC,CAAC,GAAGvM,SAAS,CAACsM,gBAAV,CAA2BX,IAA3B,CACRpI,IAAI,IAAIA,IAAI,CAACyI,MAAL,KAAgBxM,eAAe,CAACkB,IADhC,CAAV;;MAGA,IAAI6L,CAAJ,EAAO;QACL/M,eAAe,CAACwD,QAAhB,CAAyBC,OAAzB,CAAiCC,KAAK,IAAI;UACxCA,KAAK,CAAC2I,OAAN,GAAgB3I,KAAK,CAACxC,IAAN,KAAe6L,CAAC,CAACN,MAAjC;QACD,CAFD;MAGD;IACF;;IAED1M,cAAc;EACf,CAbQ,EAaN,CAACS,SAAS,CAACsM,gBAAX,CAbM,CAAT;EAkBA/O,SAAS,CAAC,MAAM;IAEd+C,eAAe,CAACd,eAAD,EAAkBO,aAAa,CAACyM,mBAAhC,CAAf;EACD,CAHQ,EAGN,CAACzM,aAAa,CAACyM,mBAAf,CAHM,CAAT;EAKA,oBACE;IAAA,wBACE,QAAC,aAAD;MAAe,EAAE,EAAEpM,UAAnB;MAAA,uBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAK,SAAS,EAAE/B,MAAM,CAAC8B,eAAvB;MAAwC,GAAG,EAAEA;IAA7C;MAAA;MAAA;MAAA;IAAA,QAJF,eAQE,QAAC,MAAD;MAAQ,OAAO,EAAC,WAAhB;MAA6B,KAAK,EAAE;QAAEsM,QAAQ,EAAE,OAAZ;QAAqBC,SAAS,EAAE,OAAhC;QAAyCC,QAAQ,EAAE,MAAnD;QAA2DC,SAAS,EAAE,MAAtE;QAA8E3H,QAAQ,EAAE,UAAxF;QAAoG4H,KAAK,EAAE,GAA3G;QAAgHC,MAAM,EAAC,GAAvH;QAA4HC,MAAM,EAAC,mBAAnI;QAAyJpM,KAAK,EAAC,OAA/J;QAAwKqM,eAAe,EAAE;MAAzL,CAApC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARF,eASE;MAAI,OAAO,EAAC,WAAZ;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QATF;EAAA,gBADF;AAaD;;GAtjBQnN,Q;;KAAAA,Q;;AAwjBT,MAAMoN,eAAe,GAAGC,KAAK,KAAK;EAChCnN,aAAa,EAAEmN,KAAK,CAACnN,aADW;EAEhCC,SAAS,EAAEkN,KAAK,CAAClN,SAFe;EAGhCC,SAAS,EAAEiN,KAAK,CAACjN,SAHe;EAIhCC,YAAY,EAAEgN,KAAK,CAAChN,YAJY;EAKhCvB,mBAAmB,EAAEhB,SAAS,CAACwP,IAAV,CAAeC,UALJ;EAMhCxO,uBAAuB,EAAEjB,SAAS,CAACwP,IAAV,CAAeC,UANR;EAOhCvO,kBAAkB,EAAElB,SAAS,CAACwP,IAAV,CAAeC;AAPH,CAAL,CAA7B;;AAUA,eAAe1P,OAAO,CAACuP,eAAD,EAAkB;EACtCtO,mBADsC;EAEtCC,uBAFsC;EAGtCC;AAHsC,CAAlB,CAAP,CAIZgB,QAJY,CAAf"},"metadata":{},"sourceType":"module"}